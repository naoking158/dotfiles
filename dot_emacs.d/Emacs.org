#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle (file-truename "~/.emacs.d/init.el")

This is an ongoing evolution of my original Emacs configuration files, inspired by
a bunch of resources I've found online.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 2 :force (ignore) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#early-init][Early-Init]]
- [[#header][Header]]
- [[#startup-performance][Startup Performance]]
- [[#package-management][Package Management]]
- [[#keep-emacsd-clean][Keep .emacs.d Clean]]
- [[#general-configuration][General Configuration]]
  - [[#properties-of-builtin][Properties of builtin]]
  - [[#change-modifiers][Change modifiers]]
  - [[#auto-revert-buffer][Auto revert buffer]]
  - [[#auto-saving-changed-files][Auto-Saving Changed Files]]
  - [[#undo-helper][Undo Helper]]
- [[#utility-functions][Utility Functions]]
  - [[#toggle-mode-line][Toggle Mode-line]]
  - [[#trim-newline-from-string][Trim newline from string]]
  - [[#sort-sexpresions][Sort Sexpresions]]
  - [[#command-log-mode][Command Log Mode]]
  - [[#presentation][Presentation]]
  - [[#bibtex-indent][Bibtex Indent]]
  - [[#copy-org-link-to-current-position][Copy org link to current position]]
- [[#basic-ui-configuration][Basic UI Configuration]]
  - [[#user-interface][User Interface]]
  - [[#frame-transparency][Frame Transparency]]
  - [[#font-configuration][Font Configuration]]
  - [[#theme-configuration][Theme Configuration]]
  - [[#modeline-configuration][Modeline Configuration]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#modal-editing-with-meow][Modal Editing with Meow]]
  - [[#keybinding-panel-which-key][Keybinding Panel (which-key)]]
  - [[#transient-commands][Transient Commands]]
- [[#file-browsing][File Browsing]]
  - [[#dired][Dired]]
  - [[#opening-files-externally][Opening Files Externally]]
  - [[#neotree][NeoTree]]
- [[#development][Development]]
  - [[#git][Git]]
  - [[#debugger-with-dap-mode][Debugger with Dap Mode]]
  - [[#projects-management][Projects Management]]
  - [[#language][Language]]
  - [[#productivity][Productivity]]
- [[#window-management][Window Management]]
  - [[#window-history-with-winner-mode][Window History with winner-mode]]
  - [[#window-selection-with-ace-window][Window Selection with ace-window]]
  - [[#window-movement-with-windmove][Window Movement with windmove]]
  - [[#resize-window][Resize Window]]
  - [[#split-and-follow][Split and follow]]
  - [[#tab-management][Tab management]]
  - [[#rotate-window-layout][Rotate Window Layout]]
  - [[#set-margins][Set Margins]]
  - [[#control-buffer-placement][Control Buffer Placement]]
- [[#completion-system][Completion System]]
  - [[#duplicate-line-or-selected-regions-with-duplicate-thing][Duplicate line or selected regions with Duplicate-thing]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#completion-actions-with-embark][Completion Actions with Embark]]
  - [[#consult-commands][Consult Commands]]
  - [[#candidate-filtering][Candidate Filtering]]
  - [[#completion-annotations-with-marginalia][Completion Annotations with Marginalia]]
  - [[#vertical-minibuffer-ui-and-completion-with-vertico][Vertical Minibuffer UI and Completion with Vertico]]
  - [[#completions-in-regions-with-corfu][Completions in Regions with Corfu]]
  - [[#colorful-icons-for-completion-with-kind-icon][Colorful icons for completion with kind-icon]]
  - [[#front-end-for-citation-with-citar][Front-end for citation with Citar]]
- [[#moving-in-buffer][Moving in buffer]]
  - [[#jumping-with-avy][Jumping with Avy]]
  - [[#jumping-beginningend-of-line-with-mwim][Jumping beginning/end of line with mwim]]
- [[#shell][Shell]]
  - [[#eshell][Eshell]]
  - [[#fish-mode][Fish Mode]]
  - [[#nix-mode][Nix Mode]]
  - [[#vterm-mode][Vterm Mode]]
- [[#runtime-performance][Runtime Performance]]
  - [[#silent-garbage-collection-with-gcmh][Silent Garbage collection with gcmh]]
- [[#org-mode][Org Mode]]
  - [[#org-configuration][Org Configuration]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-babel][Org Babel]]
  - [[#org-modern][Org-modern]]
  - [[#org-download][Org-download]]
  - [[#presentations][Presentations]]
  - [[#cross-reference][Cross Reference]]
  - [[#outline-based-notes-management-and-organizer][Outline-based notes management and organizer]]
  - [[#org-roam][Org Roam]]
  - [[#bullets][Bullets]]
  - [[#image-handling][Image Handling]]
  - [[#auto-show-markup-symbols][Auto-show Markup Symbols]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#update-table-of-contents-on-save][Update Table of Contents on Save]]
  - [[#edit-indirect][Edit-indirect]]
- [[#latex-mode][LaTeX Mode]]
- [[#applications][Applications]]
  - [[#competitive-programming-with-oj---online-judge][Competitive Programming with oj - Online Judge]]
  - [[#elfeed][Elfeed]]
  - [[#mail][Mail]]
  - [[#notmuch][Notmuch]]
  - [[#emacs-application-framework][Emacs Application Framework]]
- [[#server-mode][Server Mode]]
- [[#trial-packages][Trial Packages]]
  - [[#web-browser-with-emacs-w3m][Web Browser with emacs-w3m]]
  - [[#enhance-xwidget-webkit-browser][Enhance xwidget webkit browser]]
  - [[#pdf-tools][PDF Tools]]
  - [[#apple-script-mode][Apple Script Mode]]
  - [[#emacs-jupyter][Emacs Jupyter]]
  - [[#search-in-external-web-browser][Search in external web browser]]
  - [[#browse-at-remote][Browse at remote]]
  - [[#org-inline-anim][Org-inline-anim]]
  - [[#save-frame-and-window-configs-with-burly][Save frame and window configs with Burly]]
  - [[#csv-mode][CSV-mode]]
  - [[#markdown-preview-mode][Markdown-preview-mode]]
  - [[#mermaid-mode][Mermaid-mode]]
  - [[#editorconfig][Editorconfig]]
  - [[#format-all][Format-all]]
  - [[#direnv][Direnv]]
  - [[#poetry][Poetry]]
  - [[#pyvenv][Pyvenv]]
  - [[#openapi-preview][OpenAPI Preview]]
  - [[#svelte-mode][Svelte-mode]]
  - [[#ellama-for-ollama-communication][Ellama for Ollama communication]]
  - [[#plantuml][PlantUML]]
  - [[#reformatter][Reformatter]]
  - [[#one-tab-per-project][One-tab-per-project]]
  - [[#prettier-rc][prettier-rc]]
  - [[#lsp-proxy][lsp-proxy]]
  - [[#copilot][copilot]]
- [[#footer][Footer]]
:END:

* Early-Init
:PROPERTIES:
:ID:       4A8E2D78-CE01-4769-A784-49956617A4E5
:END:
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el

;;; early-init.el --- Early Initialization. -*- lexical-binding: t no-byte-compile: t -*-
;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;
;;; Code:

;; Speed up startup
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'emacs-startup-hook
          (lambda ()
            "Restore defalut values after startup."
            (setq file-name-handler-alist default-file-name-handler-alist
                  gc-cons-threshold (* 1024 1024 1024))))

;; basic
(prefer-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-default 'buffer-file-coding-system 'utf-8)
(setq debug-on-error nil
      init-file-debug t
      user-full-name "Naoki Sakamoto"
      user-login-name "naoking158"
      package-enable-at-startup nil
      package-native-compile t)

;; GUI
(setq default-frame-alist '((vertical-scroll-bars)
                            (menu-bar-lines . 0)
                            (tool-bar-lines . 0)
                            (left-fringe . 10)
                            (right-fringe . 10)
                            (width . 150)
                            (height . 80)))

(setq-default line-spacing 0.3)

(setq inhibit-splash-screen t
      frame-inhibit-implied-resize t
      byte-compile-warnings '(cl-functions))

;; Avoid popup Async buffer window
(add-to-list 'display-buffer-alist
             '("^*Async Shell Command*" . (display-buffer-no-window)))

;; Compilation deny package
(setq comp-deferred-compilation-deny-list (list "jupyter"))
(setq native-comp-deferred-compilation-deny-list (list "jupyter"))

(provide 'early-init)

;;; early-init.el ends here

#+end_src

* Header
:PROPERTIES:
:ID:       875737C6-80FB-4110-B49A-6A330AE8CCB9
:END:

#+begin_src emacs-lisp

;;; init.el --- My init.el  -*- lexical-binding: t; -*-

;;; Commentary:

;; My init.el.

;;; Code:

;; this enables this running method
;;   emacs -q -l ~/.debug.emacs.d/{{pkg}}/init.el

#+end_src

#+RESULTS:


* Startup Performance
:PROPERTIES:
:ID:       B395D503-F0B0-4B02-9500-C8056B6E9C6C
:END:

By setting ~exec-profile~ to ~t~, profiling startup time is executed.

#+begin_src emacs-lisp

(setq exec-profile nil)

(when exec-profile
  (defvar setup-tracker--level 0)
  (defvar setup-tracker--parents nil)
  (defvar setup-tracker--times nil)

  (when load-file-name
    (push load-file-name setup-tracker--parents)
    (push (current-time) setup-tracker--times)
    (setq setup-tracker--level (1+ setup-tracker--level)))

  (add-variable-watcher
   'load-file-name
   (lambda (_ v &rest __)
     (cond ((equal v (car setup-tracker--parents))
            nil)
           ((equal v (cadr setup-tracker--parents))
            (setq setup-tracker--level (1- setup-tracker--level))
            (let* ((now (current-time))
                   (start (pop setup-tracker--times))
                   (elapsed (+ (* (- (nth 1 now) (nth 1 start)) 1000)
                               (/ (- (nth 2 now) (nth 2 start)) 1000))))
              (with-current-buffer (get-buffer-create "*setup-tracker*")
                (save-excursion
                  (goto-char (point-min))
                  (dotimes (_ setup-tracker--level) (insert "> "))
                  (insert
                   (file-name-nondirectory (pop setup-tracker--parents))
                   " (" (number-to-string elapsed) " msec)\n")))))
           (t
            (push v setup-tracker--parents)
            (push (current-time) setup-tracker--times)
            (setq setup-tracker--level (1+ setup-tracker--level))))))


  (defun efs/display-startup-time()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
  (add-hook 'emacs-startup-hook #'efs/display-startup-time))

#+end_src

#+RESULTS:

* Package Management
:PROPERTIES:
:ID:       C4215126-C0C1-4BFE-A22B-73E377BD39D1
:END:

#+begin_src emacs-lisp
(prog1 'leaf-setup
  (eval-and-compile
    ;; Setup straight
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    ;; Install leaf and leaf-keywords
    (straight-use-package 'leaf)
    (straight-use-package 'leaf-keywords)
    (straight-use-package 'leaf-convert)
    (straight-use-package 'hydra)
    (straight-use-package 'blackout)

    (leaf leaf-keywords
      :require t
      :config (leaf-keywords-init))
    )
  )

#+end_src

#+RESULTS:
: leaf-setup

* Keep .emacs.d Clean
:PROPERTIES:
:ID:       68D98540-9112-4C5B-B6FC-A196DF4068B0
:END:

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

The location is managed by [[https://github.com/emacscollective/no-littering][no-littering]].

#+begin_src emacs-lisp

(leaf *keep-clean
  :config
  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (leaf no-littering
    :straight t
    :leaf-defer nil
    :config
    ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d

    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
          url-history-file (expand-file-name "url/history" user-emacs-directory))
    (setq no-littering-etc-directory
          (expand-file-name "etc/" user-emacs-directory))
    (setq no-littering-var-directory
          (expand-file-name "var/" user-emacs-directory)))

  ;; Keep customization settings in a temporary file
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :config
    (setq custom-file
          (if (boundp 'server-socket-dir)
              (expand-file-name "custom.el" server-socket-dir)
            (expand-file-name
             (format "emacs-custom-%s.el" (user-uid))
             temporary-file-directory)))
    (load custom-file t)
    )

  (leaf recentf
    :require no-littering
    :custom ((recentf-exclude . `(".recentf"
                                  "recentf"
                                  "bookmarks"
                                  "org-recent-headings.dat"
                                  "^/tmp\\.*"
                                  "^/private\\.*"
                                  "/TAGS$"
                                  ,no-littering-var-directory
                                  ,no-littering-etc-directory))
             `(recentf-save-file . ,(no-littering-expand-var-file-name "recentf"))
             (recentf-max-saved-items . 2000)
             (recentf-auto-cleanup . 'never))
    :global-minor-mode t)

  (leaf *auto-save
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))))
#+end_src

* General Configuration
:PROPERTIES:
:ID:       0F30392B-61E3-40B7-B4AA-2BF98C2D7FB1
:END:

** Properties of builtin
:PROPERTIES:
:ID:       F4A50035-4AB2-4522-B5A1-BD084961259A
:END:

#+begin_src emacs-lisp

(leaf *general-configrations
  :config
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "builtin" "internal"
    :url "http://handlename.hatenablog.jp/entry/2011/12/11/214923"
    :leaf-defer nil
    :bind (("C-M-d" . delete-region)
           ("C-x C-p" . switch-to-prev-buffer)
           ("C-x C-n" . switch-to-next-buffer))
    :hook (after-init-hook . general-init-hook)
    :preface
    (defun general-init-hook nil
      (menu-bar-mode -1)
      (when-let* ((gls (executable-find "gls")))
        (setq insert-directory-program gls dired-use-ls-dired t)
        (setq dired-listing-switches "-al --group-directories-first")))
    :custom '((fill-column . 82)
              (tab-width . 2)
              (indent-tabs-mode . nil)
              (frame-resize-pixelwise . t)
              (enable-recursive-minibuffers . t)
              (create-lockfiles)
              (use-dialog-box)
              (use-file-dialog)
              (history-length . 1000)
              (history-delete-duplicates . t)
              (scroll-preserve-screen-position . t)
              (scroll-conservatively . 100)
              (mouse-wheel-scroll-amount quote (1 ((control). 5)))
              (ring-bell-function . 'ignore)
              (text-quoting-style . 'straight)
              (truncate-lines . t)
              (fringe-mode . 10)
              (blink-cursor-mode . t)
              (show-paren-mode . 1)
              (confirm-kill-emacs . 'y-or-n-p)
              (recentf-auto-cleanup . 'never)
              (save-place-mode . 1)
              (save-interprogram-paste-before-kill . t)
              (indent-tabs-mode . nil)
              (native-comp-async-report-warnings-errors . nil))
    :config
    (defalias 'yes-or-no-p 'y-or-n-p)
    (keyboard-translate 8 127)
    (mapc (lambda (fn)
            (put fn 'disabled nil))
          (list 'upcase-region
                'downcase-region
                'narrow-to-region
                'narrow-to-page
                'narrow-to-defun
                'list-timers)))

  (leaf exec-path-from-shell
    :doc "Get environment variables such as $PATH from the shell"
    :tag "environment" "unix"
    :url "https://github.com/purcell/exec-path-from-shell"
    :straight t
    :leaf-defer nil
    :when window-system
    :custom
    (;; (exec-path-from-shell-check-startup-files)
     (exec-path-from-shell-variables . '("PATH"
                                         "SSH_AUTH_SOCK"
                                         "SSH_AGENT_PID"
                                         "GPG_AGENT_INFO"
                                         "LANG"
                                         "LC_CTYPE"
                                         "NODE_PATH"
                                         "PYTHONPATH"
                                         "NEPTUNE_API_TOKEN")))
    :config
    (exec-path-from-shell-initialize))

  (leaf eldoc
    :doc "Show function arglist or variable docstring in echo area"
    :tag "builtin"
    :custom (eldoc-idle-delay . 0.1)))

#+end_src

** Change modifiers
:PROPERTIES:
:ID:       1997DC11-746D-435F-856F-6B03B1925032
:END:

#+begin_src emacs-lisp

(leaf change-system-configuration
  :leaf-defer nil
  :bind (("M-o" . finder-current-dir-open)
         ("s-w" . kill-buffer)
         ("s-q" . save-buffers-kill-emacs)
         ("s-v" . yank)
         ("s-c" . kill-ring-save))
  :preface
  (defun finder-current-dir-open nil
    (interactive)
    (shell-command "open ."))
  :config
  ;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (leaf mac
    :doc "implementation of gui terminal on macos"
    :doc "each symbol can be `control', `meta', `alt', `hyper', or `super'"
    :doc "`left' meens same value setting its left key"
    :when (eq 'darwin window-system)
    :custom ((mac-control-modifier . 'control)
             (mac-option-modifier . 'meta)
             (mac-command-modifier . 'super)
             (mac-right-control-modifier . 'control)
             (mac-right-option-modifier . 'meta)
             (mac-right-command-modifier . 'super)))

  (leaf ns
    :doc "next/open/gnustep / macos communication module"
    :when (eq 'ns window-system)
    :custom ((ns-control-modifier . 'control)
             (ns-option-modifier . 'meta)
             (ns-command-modifier . 'super)
             (ns-right-control-modifier . 'control)
             (ns-right-option-modifier . 'meta)
             (ns-right-command-modifier . 'super)
             (ns-use-proxy-icon . nil))))
#+end_src

** Auto revert buffer
:PROPERTIES:
:ID:       AE3048B3-2584-49C4-86FB-DEF38673A935
:END:

#+begin_src emacs-lisp

(leaf autorevert
  :doc "revert buffers when files on disk change"
  :tag "builtin"
  :custom ((auto-revert-interval . 1)
           (global-auto-revert-non-file-buffers . t))
  :config (global-auto-revert-mode 1))

#+end_src

** Auto-Saving Changed Files
:PROPERTIES:
:ID:       5028583E-9EBB-4837-80C2-C35655D22F02
:END:

#+begin_src emacs-lisp

(leaf super-save
  :doc "Auto-save buffers, based on your activity."
  :req "emacs-24.4"
  :url "https://github.com/bbatsov/super-save"
  :straight t ace-window
  :require t ace-window
  :blackout
  :custom ((super-save-auto-save-when-idle . t)
           (super-save-idle-duration . 7)
           (super-save-remote-files . nil))
  :config
  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window)
  ;; save on find-file
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-mode +1))

#+end_src

** Undo Helper
:PROPERTIES:
:ID:       C5CFEC97-06DC-4DEB-ADEF-F006CF72C3FF
:END:

#+begin_src emacs-lisp

(leaf undo-tree
  :disabled t
  :straight t
  :hook (emacs-startup-hook . global-undo-tree-mode)
  :bind (("C-/" . undo-tree-undo)
         ("C-?" . undo-tree-redo)
         ([remap undo-tree-restore-state-from-register] . nil)
         ([remap undo-tree-save-state-to-register] . nil))
  :custom
  ((undo-tree-limit . 1000000)
   (undo-tree-strong-limit . 4000000)
   (undo-tree-outer-limit . 12000000)
   (undo-tree-auto-save-history . t)
   (undo-tree-history-directory-alist . `(("." . ,(no-littering-expand-etc-file-name
                                                   "undo"))))))

(leaf vundo
  :straight t
  :bind ("C-c u" . vundo))

#+end_src


* Utility Functions
:PROPERTIES:
:ID:       87D7535C-5EBF-42CD-B733-2599F3494455
:END:

** Toggle Mode-line
:PROPERTIES:
:ID:       5DDB2728-C9EC-49A9-BE1A-B37C517430B3
:END:
#+begin_src emacs-lisp

(defun my/toggle-modeline (&optional arg)
  (interactive)
  (if (or (null mode-line-format) arg)
      (kill-local-variable 'mode-line-format)
    (setq-local mode-line-format nil)
    (force-mode-line-update)))

#+end_src

** Trim newline from string
:PROPERTIES:
:ID:       7A1535E8-FE3A-443B-8A05-BDB5F4C6703B
:END:

#+begin_src emacs-lisp

(defun my/trim-newline-from-string (string)
  (let ((len (length string)))
    (cond
     ((and (> len 0) (eql (aref string (- len 1)) ?\n))
      (substring string 0 (- len 1)))
     (t string))))

#+end_src

** Sort Sexpresions
:PROPERTIES:
:ID:       0AA191D5-BD1A-48D0-AC53-CBEA2EFC3B9E
:END:

#+begin_src emacs-lisp

;; https://github.com/alphapapa/unpackaged.el#sort-sexps
(defun my-sort-sexps (beg end)
  "Sort sexps in region (from BEG to END)."
  (interactive "r")
  (cl-flet ((skip-whitespace () (while (looking-at (rx (1+ (or space "\n"))))
                                  (goto-char (match-end 0))))
            (skip-both () (while (cond ((or (nth 4 (syntax-ppss))
                                            (ignore-errors
                                              (save-excursion
                                                (forward-char 1)
                                                (nth 4 (syntax-ppss)))))
                                        (forward-line 1))
                                       ((looking-at (rx (1+ (or space "\n"))))
                                        (goto-char (match-end 0)))))))
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char beg)
        (skip-both)
        (cl-destructuring-bind (sexps markers)
            (cl-loop do (skip-whitespace)
                     for start = (point-marker)
                     for sexp = (ignore-errors
                                  (read (current-buffer)))
                     for end = (point-marker)
                     while sexp
                     ;; Collect the real string, then one used for sorting.
                     collect (cons (buffer-substring (marker-position start) (marker-position end))
                                   (save-excursion
                                     (goto-char (marker-position start))
                                     (skip-both)
                                     (buffer-substring (point) (marker-position end))))
                     into sexps
                     collect (cons start end)
                     into markers
                     finally return (list sexps markers))
          (setq sexps (sort sexps (lambda (a b)
                                    (string< (cdr a) (cdr b)))))
          (cl-loop for (real . sort) in sexps
                   for (start . end) in markers
                   do (progn
                        (goto-char (marker-position start))
                        (insert-before-markers real)
                        (delete-region (point) (marker-position end)))))))))

#+end_src

** Command Log Mode
:PROPERTIES:
:ID:       A06BF380-B5A0-4248-9110-CF1C080882ED
:END:

#+begin_src emacs-lisp

(leaf command-log-mode
  :straight t
  :commands command-log-mode)

#+end_src

** Presentation
:PROPERTIES:
:ID:       3bb0f0a8-f998-4792-b2c8-48557098b646
:END:

#+begin_src emacs-lisp

(defun my/toggle-presentation (fontsize)
  (interactive (list
                (read-number "Fontsize: " (if (null mode-line-format) 16 35))))

  (let ((my/presentation (null mode-line-format)))
    (my/toggle-modeline my/presentation)
    (tab-bar-mode (if my/presentation 1 'toggle))
    (my/set-font-size fontsize)))

#+end_src

** Bibtex Indent
:PROPERTIES:
:ID:       bbea9dd8-5f37-4458-a617-18c241a51c05
:END:

#+begin_src emacs-lisp

(defun my/bibtex-indent-in-buffer nil
  "Align indent and equal symbol"
  (interactive)
  (setq bibtex-align-at-equal-sign t)
  (save-excursion
    (goto-char (point-min))
    (let ((is-failed nil))
      (while (not is-failed)
        (condition-case nil
            (progn
              (re-search-forward "\@")
              (bibtex-fill-entry))
          (error (setq is-failed t)))))))

#+end_src


** Copy org link to current position

#+begin_src emacs-lisp
(defun my/copy-org-link-to-current-position ()
  (interactive)
  (let* ((file (buffer-file-name))
         (line (line-number-at-pos))
         (column (current-column))
         (pos-str (format "%d:%d" line column))
         (link (if file
                   (format "[[file:%s::%s][%s]]"
                           file pos-str (file-name-nondirectory file))
                 (error "Buffer is not visiting a file"))))
    (kill-new link)
    (message "Org link copied to kill ring: %s" link)))
#+end_src


* Basic UI Configuration
:PROPERTIES:
:ID:       55BAFA5B-FF42-4569-98F4-E85A27ACAE9A
:END:

** User Interface
:PROPERTIES:
:ID:       735D7760-356D-455C-B488-4BAE98A35A10
:END:

#+begin_src emacs-lisp

(leaf ui
  :leaf-defer nil
  :hook
  ((prog-mode-hook latex-mode-hook yaml-mode-hook) . (lambda ()
                                                       (display-line-numbers-mode 1)))

  :config
  (leaf dashboard
    :doc "A startup screen extracted from Spacemacs"
    :req "emacs-25.3" "page-break-lines-0.11"
    :tag "dashboard" "tools" "screen" "startup" "emacs>=25.3"
    :url "https://github.com/emacs-dashboard/emacs-dashboard"
    :straight t
    :require dashboard-widgets
    :leaf-defer nil
    :init
    (custom-set-variables
     '(dashboard-projects-backend (if (<= emacs-major-version 27)
                                      'projectile
                                    'project-el)))
    :custom ((dashboard-items . '((recents . 5)
                                  (projects . 5)
                                  (bookmarks . 5))))
    :config
    (when window-system
      (setq dashboard-startup-banner (expand-file-name "~/.emacs.d/etc/banner/coffee.png")))
    (dashboard-setup-startup-hook))

  (leaf set-title-bar
    :when window-system
    :config
    ;; This shoud be set before exec `display-time`.
    (setq display-time-string-forms '((format "%s %s %s" dayname monthname day)
                                      (format "  %s:%s" 24-hours minutes))
          frame-title-format '(" - " display-time-string " - Emacs"))
    (display-time))

  (leaf visual-line-mode
    :tag "builtin"
    :hook (text-mode-hook . visual-line-mode)))

#+end_src

** Frame Transparency
:PROPERTIES:
:ID:       9DF6B944-43E5-402A-BE9F-AF4A23F79B73
:END:

#+begin_src emacs-lisp

(leaf *frame-transparency
  :when window-system
  :preface
  (defun my/change-transparency (&optional num)
    "Sets the transparency of the frame window. 0=transparent/100=opaque"
    (interactive (list
                  (read-number "Transparency Value 0 - 100 opaque: " 95)))
    (set-frame-parameter nil 'alpha-background num)
    (add-to-list 'default-frame-alist
                 `(alpha-background . ,num)))

  :config
  (my/change-transparency 95))
#+end_src

** Font Configuration
:PROPERTIES:
:ID:       33497084-41F6-44A1-8AC0-3AFDA7FFFEC1
:END:

Since Apple does not support the CBDT/CBLC (color bitmap data table/color bitmap location table) color emoji format that Google and some others use for their emoji, the Noto Color Emoji can not be used in Mac.

Instead, I use *the compiled emoji fonts* uploaded in https://github.com/vXBaKeRXv/vxbakerxv.github.io/tree/master/repo/debs.

For more detail, see https://medium.com/@77belac77/how-to-get-googles-emoji-on-your-macbook-f99da72cf126.

#+begin_src emacs-lisp

(leaf font
  :when window-system
  :leaf-defer nil
  :hook (emacs-startup-hook . (lambda () (my/set-font my-fontsize)))
  :advice (:after load-theme my/set-font-after-load-theme)
  :preface
  (setq-default text-scale-remap-header-line t)
  (setq-default my-fontsize (if (eq 'darwin system-type) 17 13))

  (defun my/set-font-size (fontsize)
    (interactive (list
                  (read-number "Fontsize: " my-fontsize)))
    (set-face-attribute 'default (selected-frame) :height (* fontsize 10))
    (set-face-attribute 'fixed-pitch (selected-frame) :height (* fontsize 10))
    (set-face-attribute 'variable-pitch (selected-frame) :height (* fontsize 10)))

  (defun my/set-font (&optional fontsize)
    (interactive)
    (let ((ascii-font "UDEV Gothic NF")
          (variable-font "Iosevka Aile")
          (japanese-font "UDEV Gothic NF")
          (emoji-font (if (eq 'darwin system-type)
                          "Apple Color Emoji"
                        "Noto Color Emoji")))

      ;; ascii
      (set-face-attribute 'default nil :font ascii-font)

      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font ascii-font)

      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font variable-font)

      ;; japanese
      (set-fontset-font t 'unicode japanese-font nil 'append)

      ;; emoji
      (set-fontset-font t 'unicode emoji-font nil 'prepend))

    ;; set font height
    (when fontsize (my/set-font-size fontsize)))

  (defun my/set-font-weight (weight)
    (interactive
     (list (intern (completing-read "Choose weight:"
                                    '(light normal medium bold)))))
    (set-face-attribute 'default nil :weight weight)
    (set-face-attribute 'fixed-pitch nil :weight weight)
    (set-face-attribute 'variable-pitch nil :weight weight))

  (defun my/set-font-after-load-theme (&rest args)
    (let* ((str-theme (symbol-name (car args)))
           (weight (cond
                    ((string-match "\\(light\\|operandi\\)" str-theme) 'medium)
                    ((and (string-match "bespoke" str-theme)
                          (eq 'light bespoke-set-theme))
                     'medium)
                    (t 'normal))))
      (my/set-font-weight weight))
    (my/set-font-size my-fontsize)))

#+end_src

** Theme Configuration
:PROPERTIES:
:ID:       EEAB6FE0-6139-455B-934C-27C06F0470CB
:END:

#+begin_src emacs-lisp
(leaf themes
  :hook (emacs-startup-hook . my/default-theme)
  :advice (:before load-theme (lambda (&rest args)
                                (mapc #'disable-theme custom-enabled-themes)))
  :preface
  (leaf doom-themes
    :doc "an opinionated pack of modern color-themes"
    :req "emacs-25.1" "cl-lib-0.5"
    :tag "nova" "faces" "icons" "neotree" "theme" "one" "atom" "blue" "light" "dark" "emacs>=25.1"
    :url "https://github.com/hlissner/emacs-doom-theme"
    :straight t neotree all-the-icons
    :custom ((doom-themes-enable-italic . nil)
             (doom-themes-enable-bold . t))
    :config
    (defun my/load-doom-theme (sym-theme)
      (require 'neotree)
      (require 'all-the-icons)
      (load-theme sym-theme t)
      (doom-themes-neotree-config)
      (doom-themes-org-config)
      (doom-themes-treemacs-config)))

  (leaf modus-themes
    :straight (modus-themes
               :type git
               :host gitlab
               :repo "protesilaos/modus-themes")
    :require t
    :config
    (defun my/load-modus-theme (sym-theme)
      (setq modus-themes-disable-other-themes t
            modus-themes-bold-constructs t
            modus-themes-region '(bg-only no-extend)
            modus-themes-mixed-fonts t
            modus-themes-subtle-line-numbers t
            modus-themes-variable-pitch-headings t
            modus-themes-variable-pitch-ui t
            modus-themes-custom-auto-reload t
            modus-themes-fringes nil
            modus-themes-prompts '(intense gray)
            modus-themes-completions '((matches . (extrabold))
                                       (selection . (semibold accented))
                                       (popup . (accented intense)))
            modus-themes-paren-match '(underline)
            ;; this is an alist: read the manual or its doc string
            modus-themes-headings '((1 . (bold overline variable-pitch  1.5))
                                    (2 . (bold overline variable-pitch 1.3))
                                    (3 . (bold variable-pitch 1.2))
                                    (4 . (bold variable-pitch 1.15))
                                    (agenda-date . (1.3))
                                    (agenda-structure . (variable-pitch 1.5))
                                    (t . (bold variable-pitch 1.1)))
            modus-vivendi-tritanopia-palette-overrides '((bg-main "#040D12")
                                                         (bg-dim "#1E201E"))
            )
      ;; Load choiced theme
      (pcase sym-theme
        ('modus-dark (load-theme 'modus-vivendi-tritanopia :no-confirm))
        ('modus-light (load-theme 'modus-operandi-tritanopia :no-confirm)))))

  (leaf standard-themes
    :straight (standard-themes
               :type git
               :host gitlab
               :repo "protesilaos/standard-themes")
    :require t
    :config
    (defun my/load-standard-theme (sym-theme)
      (setq standard-themes-disable-other-themes t
            standard-themes-bold-constructs t
            standard-themes-region '(bg-only no-extend)
            standard-themes-mixed-fonts t
            standard-themes-subtle-line-numbers t
            standard-themes-variable-pitch-headings t
            standard-themes-variable-pitch-ui t
            standard-themes-custom-auto-reload t
            standard-themes-fringes nil
            standard-themes-prompts '(intense gray)
            standard-themes-completions '((matches . (extrabold))
                                          (selection . (semibold accented))
                                          (popup . (accented intense)))
            standard-themes-paren-match '(underline)
            ;; this is an alist: read the manual or its doc string
            standard-themes-headings '((1 . (bold overline variable-pitch  1.5))
                                       (2 . (bold overline variable-pitch 1.3))
                                       (3 . (bold variable-pitch 1.2))
                                       (4 . (bold variable-pitch 1.15))
                                       (agenda-date . (1.3))
                                       (agenda-structure . (variable-pitch 1.5))
                                       (t . (bold variable-pitch 1.1)))
            standard-dark-palette-overrides '((bg-main "#040D12")
                                              (bg-dim "#1E201E"))
            )
      ;; Load choiced theme
      (pcase sym-theme
        ('standard-dark (load-theme 'standard-dark :no-confirm))
        ('standard-light (load-theme 'standard-light :no-confirm)))

      (let ((color (standard-themes-with-colors (list bg-dim fg-dim))))
        (set-face-attribute 'tab-bar-tab nil
                            :background (car color))
        (set-face-attribute 'tab-bar-tab-inactive nil
                            :background (cadr color))
        )
      ))

  (leaf bespoke-themes
    :straight (bespoke-themes
               :type git
               :host github
               :repo "mclear-tools/bespoke-themes"
               :branch "main")
    :require t bespoke-theme
    :custom (;; Set initial theme variant
             (bespoke-set-italic-comments . nil)
             (bespoke-set-italic-keywords . nil))
    :config
    (defun my/load-bespoke-theme (sym-theme)
      (funcall sym-theme)
      (set-face-attribute 'org-block nil
                          :inherit 'fixed-pitch
                          :foreground nil
                          :background bespoke-subtle)

      (custom-theme-set-faces
       `user
       `(org-agenda-clocking ((t :foreground ,bespoke-salient)))
       `(org-agenda-done ((t :foreground ,bespoke-faded :strike-through nil))))

      (my/set-org-face)
      (set-face-attribute 'tab-bar nil
                          :background bespoke-modeline
                          :foreground bespoke-foreground
                          )
      (set-face-attribute 'tab-bar-tab nil
                          :background bespoke-blue)
      (set-face-attribute 'tab-bar-tab-inactive nil
                          :background bespoke-background)))

    ;;; utils
  (setq my/theme-list '(doom-nord
                        doom-solarized-light
                        modus-light
                        modus-dark
                        standard-light
                        standard-dark
                        bespoke/dark-theme
                        bespoke/light-theme))

  (defun my/load-theme-func-for (sym-theme)
    (let* ((str-theme (symbol-name sym-theme)))
      (cond
       ((string-match "doom" str-theme) #'my/load-doom-theme)
       ((string-match "modus" str-theme) #'my/load-modus-theme)
       ((string-match "standard" str-theme) #'my/load-standard-theme)
       ((string-match "bespoke" str-theme) #'my/load-bespoke-theme)
       (t #'(lambda (arg)
              (message "The theme ``%s'' is not implemented." arg)
              (message "Check the argument of ``my/load-theme''.")
              nil)))))

  (defun my/load-theme (sym-theme)
    (interactive
     (list
      (intern (completing-read "Choose one:" my/theme-list))))
    (setq my-load-theme-func (my/load-theme-func-for sym-theme))
    (funcall my-load-theme-func sym-theme))

  (defun my/default-theme nil
    ;; (my/load-theme 'modus-light)
    ;; (my/load-theme 'modus-dark)
    (my/load-theme 'standard-dark)
    )

  :config
  (column-number-mode)
  (setq inhibit-compacting-font-caches t))

#+end_src

** Modeline Configuration
:PROPERTIES:
:ID:       5e265cf7-e8c3-4018-91a1-43701bad7305
:END:

#+begin_src emacs-lisp

(leaf *modelines
  :hook (emacs-startup-hook . (lambda nil
                                (line-number-mode 1)
                                (column-number-mode 1)
                                ;; (my/modeline-lambda)
                                ;; (my/modeline-bespoke)
                                (my/modeline-doom)
                                ))
  :preface
  (leaf moody
    :when window-system
    :straight t
    :config
    (setq my--modeline-gui-rw-symbol "📖"
          my--modeline-tty-rw-symbol "RW"

          my--modeline-gui-ro-symbol "📙"
          my--modeline-tty-ro-symbol "RO"

          my--modeline-gui-mod-symbol "✏️"
          my--modeline-tty-mod-symbol "**")

    (defun my--modeline-status ()
      "Return buffer status: default symbols are read-only (📙)/(RO),
modified (✏️)/(**), or read-write (📖)/(RW)"
      (let ((read-only   buffer-read-only)
            (modified    (and buffer-file-name (buffer-modified-p))))
        ;; Use status letters for TTY display
        (cond
         (modified (if (display-graphic-p)
                       my--modeline-gui-mod-symbol
                     my--modeline-tty-mod-symbol))
         (read-only (if (display-graphic-p)
                        my--modeline-gui-ro-symbol
                      my--modeline-tty-ro-symbol))
         (t (if (display-graphic-p)
                my--modeline-gui-rw-symbol
              my--modeline-tty-rw-symbol)))))

    (defun my/modeline-moody nil
      (interactive)
      (setq x-underline-at-descent-line t
            moody-mode-line-height 30)
      (moody-replace-mode-line-buffer-identification)
      (moody-replace-vc-mode)
      (moody-replace-eldoc-minibuffer-message-function)
      (moody-replace-element 'mode-line-mule-info '(""))
      (moody-replace-element 'mode-line-client '(""))
      (moody-replace-element 'mode-line-remote '(""))
      (moody-replace-element 'mode-line-modified
                             '(:eval (my--modeline-status)))))

  (leaf bespoke-modeline
    :straight (bespoke-modeline
               :type git
               :host github
               :repo "mclear-tools/bespoke-modeline")
    :custom (;; Set header line
             (bespoke-modeline-position . 'bottom)
             ;; Set mode-line height
             (bespoke-modeline-size . 3)
             ;; Show diff lines in mode-line
             (bespoke-modeline-git-diff-mode-line . t)
             ;; Set mode-line cleaner
             (bespoke-modeline-cleaner . t)
             ;; Use mode-line visual bell
             (bespoke-modeline-visual-bell . t)
             ;; Set vc symbol
             (bespoke-modeline-vc-symbol . "G:"))
    :config
    (defun my/modeline-bespoke ()
      (bespoke-modeline-mode)))

  (leaf doom-modeline
    ;; :when (not window-system)
    :doc "A minimal and modern mode-line"
    :req "emacs-25.1" "all-the-icons-2.2.0" "shrink-path-0.2.0" "dash-2.11.0"
    :tag "mode-line" "faces" "emacs>=25.1"
    :url "https://github.com/seagle0128/doom-modeline"
    :straight t
    :custom ((doom-modeline-buffer-file-name-style . 'truncate-upto-root)
             (doom-modeline-project-detection . 'auto)
             (doom-modeline-icon . t)
             (doom-modeline-unicode-fallback . t)
             (doom-modeline-major-mode-icon . nil)
             (doom-modeline-minor-modes . nil)
             (doom-modeline-hud . t)
             (doom-modeline-env-version . t)
             (doom-modeline-workspace-name . nil)
             (doom-modeline-github . nil)
             (doom-modeline-persp-name . nil)
             (doom-modeline-display-default-persp-name . nil)
             (doom-modeline-buffer-state-icon . t)
             (doom-modeline-modal . nil)
             (doom-modeline-buffer-encoding . nil)
             )
    :config
    (defun my/modeline-doom nil
      (interactive)
      (doom-modeline-mode)))

  (leaf minions
    :straight t
    :hook (emacs-startup-hook . minions-mode)
    :custom ((minions-mode-line-lighter . ";")
             (minions-prominent-modes . '(defining-kbd-macro ;; flymake-mode
                                                             )))))

#+end_src

* Keyboard Bindings
** Modal Editing with Meow
:PROPERTIES:
:ID:       3bf18ebf-fc47-49b8-80aa-6738bec52aa9
:END:


#+begin_src emacs-lisp

(leaf meow
  :straight t
  :after consult
  :leaf-defer nil
  :config
  (require 'meow)
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     ;; '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("/" . consult-line)
     '("<escape>" . ignore)))
  (meow-setup)
  (meow-global-mode)
  (setq meow-cursor-type-region-cursor '(bar . 3)
        meow-cursor-type-insert '(bar . 3)
        meow-replace-state-name-list '((normal . "<N>")
                                       (motion . "<M>")
                                       (keypad . "<K>")
                                       (insert . "<I>")
                                       (beacon . "<B>")))
  :hook
  ((meow-insert-exit-hook . (lambda nil
                              (if skk-mode (skk-latin-mode-on))))
   ((org-agenda-mode-hook
     eshell-mode-hook
     magit-blame-mode-hook
     magit-diff-mode-hook
     lsp-bridge-ref-mode-hook) . meow-append)
   (after-change-major-mode-hook . (lambda nil
                                     (if (and (featurep 'magit)
                                              (magit-commit-message-buffer))
                                         (meow-insert)))))
  :bind ((meow-normal-state-keymap
          ("C-j" . (lambda ()
                     (interactive)
                     (if skk-mode (skk-j-mode-on))
                     (meow-append))))))

#+end_src

** Keybinding Panel (which-key)
:PROPERTIES:
:ID:       22BC7283-60A4-4BC8-88B4-1D7958E8C345
:END:

#+begin_src emacs-lisp

(leaf which-key
  :doc "Display available keybindings in popup"
  :req "emacs-24.4"
  :url "https://github.com/justbur/emacs-which-key"
  :straight t
  :blackout t
  :custom ((which-key-idle-delay . 1)
           (which-key-replacement-alist quote
                                        (((nil . "Prefix Command")
                                          nil . "prefix")
                                         ((nil . "\\`\\?\\?\\'")
                                          nil . "lambda")
                                         (("<left>")
                                          "←")
                                         (("<right>")
                                          "→")
                                         (("<\\([[:alnum:]-]+\\)>")
                                          "\\1"))))
  :global-minor-mode t)

#+end_src

** Transient Commands
:PROPERTIES:
:ID:       969836D1-7B4A-4EC2-86C2-6DCE273A7EAD
:END:

#+begin_src emacs-lisp

(leaf transient
  :doc "Transient commands"
  :req "emacs-25.1"
  :url "https://github.com/magit/transient"
  :straight t
  :custom ((transient-detect-key-conflicts . t))
  :config
  (leaf transient-dwim
    :doc "Useful preset transient commands"
    :req "emacs-26.1" "transient-0.1.0"
    :tag "conao3" "conao3-dev" "out-of-MELPA"
    :url "https://github.com/conao3/transient-dwim.el"
    :straight t
    :bind ("M-=" . transient-dwim-dispatch)))

#+end_src

* File Browsing

** Dired
:PROPERTIES:
:ID:       7B15B2B4-0502-4935-AE2D-57270ABB1D11
:END:

#+begin_src emacs-lisp

;; (leaf dired
;;   :straight dired-collapse
;;   :require dired-x
;;   :hook (dired-mode-hook . (lambda ()
;;                              (dired-collapse-mode 1)
;;                              (dired-omit-mode)
;;                              (dired-hide-details-mode 1)))
;;   :bind (dired-mode-map
;;          ("o" . dired-display-file))
;;   :custom ((dired-listing-switches . "-agho --group-directories-first")
;;            (dired-omit-files . "^\\.[^.].*")
;;            (dired-omit-verbose . nil)
;;            (dired-hide-details-hide-symlink-targets . nil)
;;            (delete-by-moving-to-trash . t)
;;            (dired-dwim-target . t)))

(leaf dirvish
  :straight t
  :custom
  ((dired-kill-when-opening-new-dired-buffer . t) ; added in emacs 28
   (dired-clean-confirm-killing-deleted-buffers . nil)
   (dired-recursive-copies . 'always)
   (dired-recursive-deletes . 'always)
   (delete-by-moving-to-trash . t)
   (dired-dwim-target . t)
   (dired-listing-switches . "-AGhlv --group-directories-first --time-style=long-iso"))
  )
#+end_src


** Opening Files Externally
:PROPERTIES:
:ID:       14A7495E-07F8-4FA0-9D5F-F3C392125443
:END:

#+begin_src emacs-lisp

(leaf crux
  :straight t
  :bind ("C-S-k" . crux-top-join-line))

#+end_src


** NeoTree
:PROPERTIES:
:ID:       5DFA1940-4922-4481-8CCC-9A8BC862C7F2
:END:

Keybindings

Only in Neotree Buffer:

+ =n= next line, p previous line。
+ =SPC= or =RET= or =TAB= Open current item if it is a file. Fold/Unfold current item if it is a directory.
+ =U= Go up a directory
+ =g= Refresh
+ =A= Maximize/Minimize the NeoTree Window
+ =H= Toggle display hidden files
+ =O= Recursively open a directory
+ =C-c C-n= Create a file or create a directory if filename ends with a ‘/’
+ =C-c C-d= Delete a file or a directory.
+ =C-c C-r= Rename a file or a directory.
+ =C-c C-c= Change the root directory.
+ =C-c C-p= Copy a file or a directory.

#+begin_src emacs-lisp

(leaf neotree
  :straight t all-the-icons
  :require all-the-icons
  ;; :bind ("C-c c" . neotree-show)
  :custom ((neo-show-hidden-files . t)
           (neo-smart-open . t)
           (neo-window-fixed-size . nil)
           (neo-confirm-create-file . 'y-or-n-p)
           (neo-confirm-create-directory . 'y-or-n-p)))

#+end_src

* Development
** Git
*** Magit
:PROPERTIES:
:ID:       57099EC8-7F82-4B38-A4D6-428C9215F31F
:END:

#+begin_src emacs-lisp

(leaf magit
  :doc "A Git porcelain inside Emacs."
  :req "emacs-25.1" "async-20200113" "dash-20200524" "git-commit-20200516" "transient-20200601" "with-editor-20200522"
  :url "https://github.com/magit/magit"
  :straight t
  :bind (("C-c m" . magit-status)
         ("C-c b" . magit-blame))
  :custom ((magit-bury-buffer-function quote magit-mode-quit-window)
           (magit-refresh-verbose . t)
           (magit-commit-ask-to-stage quote stage)
           (magit-clone-set-remote\.pushDefault . t)
           (magit-clone-default-directory . "~/src/github.com/")
           (magit-remote-add-set-remote\.pushDefault quote ask)
           (magit-log-margin-show-committer-date . t)
           (magit-log-margin . '(t "%m/%d/%Y %H:%M " magit-log-margin-width t 12)))
  :config
  (leaf emoji-cheat-sheet-plus
    :straight t
    :commands magit-status
    :hook (magit-log-mode-hook . emoji-cheat-sheet-plus-display-mode))
)

#+end_src
*** Forge
:PROPERTIES:
:ID:       8841b57d-e251-418b-9bad-97b1d36430ee
:END:

#+begin_src emacs-lisp
(leaf forge
  :after magit
  :straight t)
#+end_src

*** Git Gutter
:PROPERTIES:
:ID:       13171497-5635-4D7E-A969-8CECF29BB14A
:END:

#+begin_src emacs-lisp

(leaf git-gutter
  :straight t
  :global-minor-mode global-git-gutter-mode)
#+end_src


*** Magit-delta
:PROPERTIES:
:ID:       e51f8781-8c1c-4f34-9974-dfe593cfc3d7
:END:

#+begin_src emacs-lisp
(leaf magit-delta
  :straight t)
#+end_src
** Debugger with Dap Mode
:PROPERTIES:
:ID:       bfff3e15-0f68-4e8a-95c0-effa1fc17730
:END:

#+begin_src emacs-lisp
(leaf dap-mode
  :disabled t
  :when window-system
  :straight t
  ;; :after exec-path-from-shell
  :custom (;; (dap-python-debugger . 'debugpy)
           ;; (dap-python-executable . path-to-venv-python)
           (dap-auto-configure-features . '(sessions locals tooltip))
           ;; (lsp-enable-dap-auto-configure . nil)
           )
  :hook
  (python-mode-hook . (lambda nil
                        (require 'dap-mode)
                        (require 'dap-python)
                        (dap-mode)
                        (dap-ui-mode)
                        (dap-tooltip-mode)
                        (add-hook 'dap-stopped-hook
                                  #'(lambda (arg)
                                      (call-interactively #'dap-hydra)))))
  ((dap-stopped-hook . (lambda (arg) (call-interactively #'dap-hydra)))
   (python-mode-hook . dap-mode)
   (python-mode-hook . dap-ui-mode)
   (python-mode-hook . dap-tooltip-mode))
  )
#+end_src

*** Get Started
- =dap-debug=: Select a template to execute
- =dap-debug-last=: Run the most recent template
- =dap-debug-recent=: Select a recent template to run
- =dap-disconnect=: Disconnect from the debugging session (output buffer retained)
- =dap-delete-session=: Delete the current session (output buffer will be deleted)
- =dap-delete-all-sessions=: Clean up all debugging sessions

*** Breakpoints
- =dap-breakpoint-toggle=: Toggle a breakpoint on the current line
- =dap-breakpoint-delete-all=: Delete all breakpoints in the workspace
- =dap-breakpoint-condition=: Set condition for breakpoint
- =dap-breakpoint-log-message=: Set hit condition, number of hits before breakpoint stops.
- =dap-breakpoint-log-message=: Set log message for breakpoint (interpolate expressions with {})
- =dap-ui-breakpoints=: Show breakpoints panel



** Projects Management
:PROPERTIES:
:ID:       B887BCAD-C177-4C2B-8655-1304091A35AF
:END:

#+begin_src emacs-lisp

(leaf projectile
  :when (version< emacs-version "28")
  :doc "Manage and navigate projects in Emacs easily"
  :req "emacs-25.1" "pkg-info-0.4"
  :url "https://github.com/bbatsov/projectile"
  :straight t
  :custom (projectile-enable-caching . t)
  :global-minor-mode t)


(leaf project
  :when (version<= "28" emacs-version)
  :straight t)

#+end_src

** Language
*** Language Server Support with LSP-mode
:PROPERTIES:
:ID:       87866DFF-1C8E-4735-8871-63E754812DAF
:END:

#+begin_src emacs-lisp
(leaf lsp-bridge
  :disabled t
  :straight (lsp-bridge
             :type git
             :host github
             :repo "manateelazycat/lsp-bridge"
             :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
             :build (:not compile))
  :hook ((hack-local-variables-hook . run-local-vars-mode-hook)
         (yas-global-mode-hook . global-lsp-bridge-mode))
  :custom `((lsp-bridge-python-command . ,(expand-file-name "~/.emacs.d/etc/lsp-bridge/.venv/bin/python3"))
            (lsp-bridge-enable-completion-in-minibuffer . t)
            (lsp-bridge-enable-completion-in-string . t)
            (lsp-bridge-signature-show-function . 'message)
            (lsp-bridge-enable-hover-diagnostic . t)
            (lsp-bridge-enable-inlay-hint . t)
            (lsp-bridge-user-langserver-dir . ,(if (file-exists-p "~/.emacs.d/etc/lsp-bridge/langserver")
                                                   (expand-file-name "~/.emacs.d/etc/lsp-bridge/langserver")))
            (lsp-bridge-user-multiserver-dir . ,(if (file-exists-p "~/.emacs.d/etc/lsp-bridge/multiserver")
                                                    (expand-file-name "~/.emacs.d/etc/lsp-bridge/multiserver")))
            (lsp-bridge-python-multi-lsp-server . "pyright_ruff")
            (acm-enable-icon . t)
            (acm-enable-quick-access . t)
            (acm-enable-copilot . t)
            (acm-enable-tabnine . nil)
            (acm-enable-codeium . nil)
            (acm-backend-order . '("mode-first-part-candidates"
                                   "copilot-candidates"
                                   "template-first-part-candidates"
                                   "template-second-part-candidates"
                                   "mode-second-part-candidates"))
            )
  :defun (acm-doc-scroll-up acm-doc-scroll-down)
  :bind ((:lsp-bridge-mode-map
          :package lsp-bridge
          ("M-." . lsp-bridge-find-def)
          ("M-," . lsp-bridge-find-def-return)
          ("C-c C-j" . lsp-bridge-find-def-other-window)
          ("C-c C-r" . lsp-bridge-find-references)
          ("C-c C-d" . lsp-bridge-popup-documentation)
          ("C-c C-n" . lsp-bridge-diagnostic-jump-next)
          ("C-c C-p" . lsp-bridge-diagnostic-jump-prev)
          ("C-c l l" . lsp-bridge-diagnostic-list)
          ("C-c l c" . lsp-bridge-diagnostic-copy)
          ("C-c l r" . lsp-bridge-rename)
          ("C-c l i" . lsp-bridge-find-impl)
          ("M-p" . lsp-bridge-popup-documentation-scroll-down)
          ("M-n" . lsp-bridge-popup-documentation-scroll-up)
          )
         (:acm-mode-map
          :package acm
          ("C-j" . skk-kakutei)
          )
         )
  :preface
  (defun run-local-vars-mode-hook ()
    "Run `major-mode' hook after the local variables have been processed."
    (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))
  :config
  ;;; This patch needs to avoid following error:
  ;;; json-parse-error \u0000 is not allowed without JSON_ALLOW_NUL
  ;;; ref: https://github.com/emacs-lsp/lsp-mode/issues/2681
  (advice-add 'json-parse-buffer :around
              (lambda (orig &rest rest)
                (while (re-search-forward "\\u0000" nil t)
                  (replace-match ""))
                (apply orig rest)))

  (add-to-list 'lsp-bridge-single-lang-server-mode-list '(svelte-mode . "svelte"))
  (add-to-list 'lsp-bridge-default-mode-hooks 'svelte-mode-hook)

  (add-to-list 'lsp-bridge-multi-lang-server-mode-list '(vue-mode . "volar_emmet"))
  (add-to-list 'lsp-bridge-default-mode-hooks 'vue-mode-hook)

  (add-to-list 'lsp-bridge-multi-lang-server-mode-list '(vue-ts-mode . "volar_emmet"))
  (add-to-list 'lsp-bridge-default-mode-hooks 'vue-ts-mode-hook)

  (add-to-list 'lsp-bridge-single-lang-server-mode-list '(protobuf-mode . "protobuf"))
  (add-to-list 'lsp-bridge-default-mode-hooks 'protobuf-mode-hook)

  (setq lsp-bridge-get-project-path-by-filepath
        (lambda (filepath)
          (let ((root (locate-dominating-file filepath "package.json")))
            (when root (expand-file-name root)))))
  )
#+end_src

*** Emacs Lisp
:PROPERTIES:
:ID:       FD410FBA-E2FA-441C-9883-C739500E4BF5
:END:

#+begin_src emacs-lisp

(leaf helpful
  :straight t
  :bind* (("C-c h f" . helpful-function)
          ("C-c h s" . helpful-symbol)
          ("C-c h v" . helpful-variable)
          ("C-c h c" . helpful-command)
          ("C-c h k" . helpful-key)))

;; (leaf macrostep
;;   :straight t
;;   :bind (("C-c e" . macrostep-expand)))

#+end_src

*** Lua
:PROPERTIES:
:ID:       5fa92fb0-06c4-4f5b-827a-eec16433af59
:END:

#+begin_src emacs-lisp
(leaf lua-mode
  :straight t)
#+end_src

*** Python
:PROPERTIES:
:ID:       9C320B3B-BEB9-40A0-A0DF-9587475A9D88
:END:

#+begin_src emacs-lisp
(leaf python-mode
  :doc "Python major mode"
  :url "https://gitlab.com/groups/python-mode-devs"
  :straight t
  :mode "\\.py\\'"
  :custom `((py-keep-windows-configuration . t)
            (python-indent-guess-indent-offset . t)
            (python-indent-guess-indent-offset-verbose . nil)
            (py-python-command . ,(if (executable-find "python3") "python3"
                                "python")))
  :hook (python-mode-hook . my/python-basic-config)
  :preface
  (defun my/python-basic-config ()
    (setq indent-tabs-mode nil
          python-indent 4)))

(leaf python-isort :straight t)

(leaf blacken
  :straight t
  :custom ((blacken-line-length . 91)
           (blacken-skip-string-normalization . t)))
#+end_src


*** Web
:PROPERTIES:
:ID:       8A817B4F-518D-40C2-BCEE-2573EACF9E9D
:END:

#+begin_src emacs-lisp
(leaf add-node-modules-path
  :disabled t
  :straight (add-node-modules-path
             :type git
             :host github
             :repo "codesuki/add-node-modules-path")
  :hook ((vue-mode-hook js-mode-hook typescript-mode-hook) . add-node-modules-path)
  :custom (add-node-modules-path-command . '("echo \"$(npm root)/.bin\"")))

(leaf web-mode
  :straight t
  :custom ((web-mode-markup-indent-offset . 2)
           (web-mode-css-indent-offset . 2)
           (web-mode-code-indent-offset . 2)
           (web-mode-part-padding . 0)
           (web-mode-style-padding . 0)
           (web-mode-script-padding . 0))
  :mode ("\\.html\\'"
         "\\.phtml\\'"
         "\\.tpl\\.php\\'"
         "\\.[agj]sp\\'"
         "\\.as[cp]x\\'"
         "\\.erb\\'"
         "\\.mustache\\'"
         "\\.djhtml\\'"
         "\\.ejs\\'"
         )
  )

(leaf vue-ts-mode
  :straight (vue-ts-mode
             :type git
             :host github
             :repo "8uff3r/vue-ts-mode")
  :mode "\\.vue\\'")

(leaf emmet-mode
  :straight t
  :hook web-mode-hook vue-ts-mode-hook
  :bind (:emmet-mode-keymap
         ("C-j" . skk-kakutei)
         ("C-c e" . emmet-expand-line)))
#+end_src

*** JavaScript
:PROPERTIES:
:ID:       ce098f26-1217-49b0-b69a-0f0cd6db9a53
:END:

#+begin_src emacs-lisp

(leaf *javascript
  :hook
  (js-mode-hook . (lambda nil
                    (make-local-variable 'js-indent-level)
                    (setq js-indent-level 2))))

#+end_src

*** TypeScript
:PROPERTIES:
:ID:       f23d8e72-9453-4630-9b3a-3c25a250ff9c
:END:

#+begin_src emacs-lisp
(leaf typescript-mode
  :straight t
  :mode (("\\.ts\\'" . typescript-mode)
         ("\\.tsx\\'" . typescript-mode))
  :custom ((typescript-indent-level . 2)
           (typescript-auto-indent-flag . nil))
  ;; :hook (typescript-mode-local-vars-hook . (lambda nil
  ;;                                      (lsp-bridge-mode)))
  )

(leaf deno-emacs
  :disabled t
  :straight (deno-emacs
             :type git
             :host github
             :repo "rclarey/deno-emacs"
             :includes deno-fmt)
  :require deno-fmt
  :hook (typescript-mode-hook . deno-fmt-mode))
#+end_src


*** JSON
:PROPERTIES:
:ID:       55cc69e2-8160-4b9a-be65-89590a76897c
:END:

#+begin_src emacs-lisp
(leaf json-mode
  :straight t
  :custom
  ((json-mode-standard-file-ext . '(".json" ".jsonc" ".jsonld"))))
#+end_src

*** Markdown
:PROPERTIES:
:ID:       ba4b8a80-1f21-429f-a2db-3b866cb30598
:END:

#+begin_src emacs-lisp
(leaf markdown-mode
  :mode (("\\.md\\'" . gfm-mode)
         ("\\.spec\\'" . markdown-mode))
  :custom (markdown-command . "multimarkdown"))
#+end_src

*** Shell
:PROPERTIES:
:ID:       401dcc88-8194-4271-8956-3e034cc51f1a
:END:

#+begin_src emacs-lisp
;; (leaf sh-mode
;;   :hook (sh-mode-hook . lsp-bridge-mode))
#+end_src

*** Docker
:PROPERTIES:
:ID:       b6aa1cd1-6480-46f4-89ed-71d19a6c4839
:END:

#+begin_src emacs-lisp
(leaf dockerfile-mode
  :straight (dockerfile-mode
             :type git
             :host github
             :repo "spotify/dockerfile-mode")
  :mode "Dockerfile\\'")

(leaf docker-compose-mode
  :straight t)
#+end_src

*** yaml-mode
:PROPERTIES:
:ID:       6df5d1be-e673-476e-95a7-9933eeb032b7
:END:

#+begin_src emacs-lisp
(leaf yaml-mode
  :straight (yaml-mode
             :type git
             :host github
             :repo "yoshiki/yaml-mode")
  :mode ("\\.yml\\'" "\\.yaml\\'"))
#+end_src

*** Go-mode
:PROPERTIES:
:ID:       8c18d30c-fd30-4585-ad6f-b509cbe3ac83
:END:

#+begin_src emacs-lisp
(leaf go-mode
  :straight t
  :custom (gofmt-command . "goimports")
  :config
  (leaf go-ts-mode
    :hook ((go-ts-mode-hook . my/go-basic-config)
           ;; (go-ts-mode-hook . go-format-on-save-mode)
           )
    :preface
    (defun my/go-basic-config ()
      (setq-local indent-tabs-mode t
                  tab-width 2
                  go-ts-mode-indent-offset 2))
    :config
    ;; ref: https://magnus.therning.org/2023-11-16-using-the-golang-mode-shipped-with-emacs.html
    (reformatter-define go-format
      :program "goimports"
      :args '("/dev/stdin"))
    )
  )
#+end_src

*** Ansible
:PROPERTIES:
:ID:       3c804681-1bdf-45ac-b1d8-b02ebed339ae
:END:

#+begin_src emacs-lisp
(leaf ansible
  :straight t
  :hook ((yaml-mode-hook . (lambda ()
                             (ansible 1)
                             ;; (lsp-bridge-mode 1)
                             )))
  :config
  (require 'lsp-bridge)
  (add-to-list 'lsp-bridge-single-lang-server-mode-list '(yaml-mode . "ansible-language-server")))
#+end_src

*** GraphQL mode

#+begin_src emacs-lisp
(leaf graphql-mode
  :straight t
  :mode ("\\.graphql\\'" "\\.gql\\'"))
#+end_src

*** Protocol buffer

#+begin_src emacs-lisp
(leaf protobuf-mode
  :straight t)
#+end_src

*** Terraform

#+begin_src emacs-lisp
(leaf terraform-mode
  :straight t)
#+end_src


*** Sql format

#+begin_src emacs-lisp
(leaf sqlformat
  :straight t
  :custom ((sqlformat-command . 'sql-formatter)
           (sqlformat-args . `("--config" ,(expand-file-name "~/.config/sql-formatter/config.json"))))
  )
#+end_src

** Productivity
*** Syntax checking with Flymake
:PROPERTIES:
:ID:       FBF95B4E-4C56-4934-B0E9-23D0DAB6BD37
:END:

#+begin_src emacs-lisp

(leaf flymake
  :disabled t
  :doc "A universal on-the-fly syntax checker"
  :tag "builtin"
  :custom (flymake-gui-warnings-enabled . t)
  :bind (flymake-mode-map
         ("C-c C-n" . flymake-goto-next-error)
         ("C-c C-p" . flymake-goto-prev-error))
  :config
  (leaf flymake-diagnostic-at-point
    :doc "Display flymake diagnostics at point"
    :req "emacs-26.1" "popup-0.5.3"
    :tag "tools" "languages" "convenience" "emacs>=26.1"
    :url "https://github.com/meqif/flymake-diagnostic-at-point"
    :straight t
    :after flymake
    :custom ((flymake-diagnostic-at-point-timer-delay . 0.8)
             (flymake-diagnostic-at-point-error-prefix . " ► ")
             (flymake-diagnostic-at-point-display-diagnostic-function
              quote flymake-diagnostic-at-point-display-minibuffer))
    :hook (flymake-mode-hook . flymake-diagnostic-at-point-mode))


  (leaf flymake-posframe
    :straight (flymake-posframe
               :type git
               :host github
               :repo "ladicle/flymake-posframe")
    :hook (flymake-mode-hook . flymake-posframe-mode)
    :custom ((flymake-posframe-warning-prefix . "⚠️ ")
             (flymake-posframe-error-prefix . "🚫 ")
             (flymake-posframe-note-prefix . "✏️ ")))
  )

#+end_src

*** Spell checking with flyspell
:PROPERTIES:
:ID:       B9A58FDF-05D7-4727-BDCD-4907A11ABC13
:END:

#+begin_src emacs-lisp

(leaf flyspell
  ;; :hook (LaTeX-mode-hook org-mode-hook markdown-mode-hook text-mode-hook)
  :config
  (leaf ispell
    :doc "interface to spell checkers"
    :tag "builtin"
    :custom ((ispell-program-name . "aspell")
             (ispell-local-dictionary . "en_US"))
    :hook (emacs-startup-hook . (lambda ()
                                  ;; for text mixed English and Japanese
                                  (add-to-list 'ispell-skip-region-alist
                                               '("[^\000-\377]+"))))))

#+end_src

*** Pulser
:PROPERTIES:
:ID:       4ae89180-6a8f-40ff-893f-088c1a07ef9a
:END:

#+begin_src emacs-lisp
(leaf pulsar
  :straight t
  :custom ((pulsar-pulse-on-window-change . t)
           (pulsar-pulse . t))
  :global-minor-mode pulsar-global-mode)
#+end_src


*** Textlint with Flycheck
:PROPERTIES:
:ID:       E823FF2D-5DB1-4BF2-98DB-A18062B623FB
:END:

#+begin_src emacs-lisp

(leaf flycheck
  :straight t
  :bind (("C-c C-n" . flycheck-next-error)
         ("C-c C-p" . flycheck-previous-error))
  :hook (
         typescript-mode-hook
         vue-mode-hook
         vue-ts-mode-hook
         go-mode-hook
         go-ts-mode-hook
         )
  :custom ((flycheck-display-errors-delay . 0.8))
  :config
  (flycheck-add-mode 'javascript-eslint 'vue-mode)
  (leaf flycheck-pos-tip
    :disabled t
    :straight t
    :custom (flycheck-pos-tip-timeout . 10)
    :config
    (flycheck-pos-tip-mode))

  (leaf flycheck-inline
    :disabled t
    :straight t
    :hook (flycheck-mode-hook . flycheck-inline-mode)
    :advice
    (:override flycheck-inline--error-face my--flycheck-inline--error-face)
    (:override flycheck-inline--error-message my--flycheck-inline--error-message)
    :preface
    (defun my--flycheck-inline--error-face (err)
      "Return the face used to display ERR."
      (pcase (flycheck-error-level err)
        (`info 'flycheck-inline-info)
        (`warning 'flycheck-inline-warning)
        (`error 'flycheck-inline-error)
        (_ 'flycheck-inline-info)))

    (defun my--flycheck-inline--error-message (err)
      "Return the message to display for ERR."
      (let ((filename (flycheck-error-filename err))
            (id (flycheck-error-id err))
            (prefix (pcase (flycheck-error-level err)
                      (`info "✏️ ")
                      (`warning "⚠️ ")
                      (`error "🚫 ")
                      (_ "✏️ "))))
        (concat
         prefix
         (when (and filename (not (equal filename (buffer-file-name))))
           (format "In \"%s\":\n" (file-relative-name filename default-directory)))
         (flycheck-error-message err)
         (when (and id flycheck-inline-display-error-id)
           (format " [%s]" id))))))

  (leaf *flycheck-gui
    :disabled t
    :when window-system
    :config
    ;; checker for textlint
    (flycheck-define-checker textlint
      "A linter for text."
      :command ("~/.config/textlint/textlint.sh" source)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message (one-or-more not-newline)
                         (zero-or-more "
" (any " ") (one-or-more not-newline)))
                line-end))
      :modes (latex-mode latex-extra-mode))

    (add-hook 'latex-extra-mode-hook #'(lambda nil
                                         (setq flycheck-checker 'textlint)
                                         (flycheck-mode 1))))

  (leaf *flycheck-tty
    :when (not window-system)
    :custom (flycheck-indication-mode . 'left-margin)
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-set-indication-mode)))

#+end_src

*** Indent checking with highlight-indent-guides
:PROPERTIES:
:ID:       BF1D8C1E-1ED3-4B41-A3F5-0295C163418B
:END:

#+begin_src emacs-lisp

(leaf highlight-indent-guides
  :blackout
  :doc "Minor mode to highlight indentation"
  :req "emacs-24.1"
  :url "https://github.com/DarthFennec/highlight-indent-guides"
  :straight t
  :hook prog-mode-hook yaml-mode-hook
  :custom ((highlight-indent-guides-auto-enabled . nil)
           (highlight-indent-guides-responsive . t)
           (highlight-indent-guides-method . 'character)
           (highlight-indent-guides-suppress-auto-error . t))
  :custom-face ((highlight-indent-guides-odd-face . '((nil (:foreground "#88ca9f"))))
                (highlight-indent-guides-even-face . '((nil (:foreground "#88ca9f"))))
                (highlight-indent-guides-character-face . '((nil (:foreground "#2266ae"))))))

#+end_src

*** Tree Sitter
:PROPERTIES:
:ID:       2B53130F-3718-4EE5-9CF1-1E8C33996939
:END:


#+begin_src emacs-lisp
(leaf treesit-auto
  :disabled t
  :straight t
  :global-minor-mode global-treesit-auto-mode
  :custom ((treesit-auto-install . t)
           (treesit-font-lock-level . 4)))

(leaf treesit-langs
  :straight (treesit-langs
             :type git
             :host github
             :repo "kiennq/treesit-langs"
             :files (:defaults "*.el" "queries"))
  :hook ((prog-mode text-mode conf-mode)
         . (lambda ()
             ;; some mode is better be highlighted not using tree-sitter
             (unless (member major-mode '(sh-mode))
               (ignore-errors (treesit-hl-toggle 'on)))))
  :custom ((treesit-font-lock-level . 4)
           (treesit-langs-git-dir . nil)
           (treesit-langs-grammar-dir . "~/.emacs.d/etc/tree-sitter"))
  :config
  (add-to-list 'treesit-extra-load-path treesit-langs-grammar-dir))

#+end_src

*** Showing Pair of Brackets with Paren
:PROPERTIES:
:ID:       DDCDF00F-9DC8-47FD-8DFD-68B9B21E8A02
:END:

#+begin_src emacs-lisp

(leaf paren
  :hook (emacs-startup-hook . show-paren-mode)
  :custom-face
  (show-paren-match . '((nil
                         (:background "#44475a" :foreground "#f1fa8c"))))
  :custom
  ((show-paren-style . 'mixed)
   (show-paren-when-point-inside-paren . t)
   (show-paren-when-point-in-periphery . t)))

#+end_src

*** Pair edit with puni
:PROPERTIES:
:ID:       D988D9B4-1415-40F3-B73D-E1B7C6195F17
:END:

#+begin_src emacs-lisp
(leaf puni
  :straight (puni
             :type git
             :host github
             :repo "AmaiKinono/puni")
  :hook (prog-mode-hook . puni-mode)
  :bind (puni-mode-map
         ("C-)" . puni-slurp-forward)
         ("C-}" . puni-barf-forward)
         ("M-(" . puni-wrap-round)
         ("M-s" . puni-splice)
         ("M-r" . puni-raise)
         ("M-U" . puni-splice-killing-backward)
         ("M-z" . puni-squeeze))  
  )

(leaf elec-pair
  :doc "Automatic parenthesis pairing"
  :global-minor-mode electric-pair-mode
  :hook ((web-mode-hook . (lambda ()
                            (setq-local electric-pair-inhibit-predicate
                                        `(lambda (c)
                                           (if (char-equal c ?{) t (,electric-pair-inhibit-predicate c))))))
         (org-mode-hook . (lambda ()
                            (setq-local electric-pair-inhibit-predicate
                                        `(lambda (c)
                                           (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
         ))
#+end_src


*** Highlighting Brackets with Rainbow Delimiters
:PROPERTIES:
:ID:       3EF97CF6-3B0C-4FEC-A58C-4AA9A82942FC
:END:

#+begin_src emacs-lisp

(leaf rainbow-delimiters
  :doc "Highlight brackets according to their depth"
  :url "https://github.com/Fanael/rainbow-delimiters"
  :straight t
  :hook (prog-mode-hook . rainbow-delimiters-mode))

#+end_src

*** Rainbow Mode
:PROPERTIES:
:ID:       C5F9C388-FBB4-46CB-AA0E-7E71FECBCAB3
:END:

Sets the background of HTML color strings in buffers to be the color mentioned.


#+begin_src emacs-lisp

(leaf rainbow-mode
  :doc "Colorize color names in buffers"
  :tag "faces"
  :url "http://elpa.gnu.org/packages/rainbow-mode.html"
  :straight t
  :blackout t
  :commands rainbow-mode
  :custom ((rainbow-html-colors-major-mode-list . '(css-mode
                                                    html-mode
                                                    php-mode
                                                    nxml-mode
                                                    xml-mode))
           (rainbow-x-colors-major-mode-list . '(emacs-lisp-mode
                                                 lisp-interaction-mode
                                                 c-mode
                                                 c++-mode
                                                 java-mode))
           (rainbow-latex-colors-major-mode-list . '(latex-mode))
           (rainbow-ansi-colors-major-mode-list . '(sh-mode c-mode c++-mode))
           (rainbow-r-colors-major-mode-list . '(ess-mode)))
  :hook (prog-mode-hook))

#+end_src

*** Visual Feedback on Some Operations
:PROPERTIES:
:ID:       7D0A5B1F-2E04-46C1-B40C-C4E89180EAB4
:END:



#+begin_src emacs-lisp

(leaf volatile-highlights
  :doc "Minor mode for visual feedback on some operations."
  :url "http://www.emacswiki.org/emacs/download/volatile-highlights.el"
  :straight t
  :blackout
  :hook emacs-startup-hook
  :custom-face
  (vhl/default-face quote
                    ((nil (:foreground "#FF3333" :background "#FFCDCD")))))

#+end_src

*** Line Highlight with LIN
:PROPERTIES:
:ID:       26904d3a-10f4-456d-a3ad-c1e3ed1b4b2c
:END:

:PROPERTIES:
:ID:       FDAF3AFD-70D4-48BB-8A55-EFFD8EE7FF7B
:END:

#+begin_src emacs-lisp

(leaf lin
  :straight t
  :custom ((lin-mode-hooks . '(text-mode-hook prog-mode-hook notmuch-search-mode-hook))
           (lin-face . 'lin-cyan))
  :config
  (global-hl-line-mode)
  (lin-global-mode 1))

#+end_src


*** Snippets
:PROPERTIES:
:ID:       A418447A-324A-4000-B617-52D45DB69CAE
:END:

#+begin_src emacs-lisp

(leaf yasnippet
  :straight t
  :hook (emacs-startup-hook . yas-global-mode)
  :custom ((yas-indent-line . 'fixed))
  :bind ((yas-keymap
          ("<tab>" . nil))  ;; conflict with company/coruf
         (yas-minor-mode-map
          ("C-c y i" . yas-insert-snippet)
          ("C-c y n" . yas-new-snippet)
          ("C-c y v" . yas-visit-snippet-file)
          ("C-c y l" . yas-describe-tables)
          ("C-c y g" . yas-reload-all)))
  :config
  (add-to-list 'yas-snippet-dirs (file-truename "~/.emacs.d/etc/snippets/"))
  (leaf yasnippet-snippets :straight t))
#+end_src

*** Google Translate
:PROPERTIES:
:ID:       0A7A0E73-9951-4039-9314-4E9E7805FAFE
:END:

#+begin_src emacs-lisp

(leaf google-translate
  :straight t popup
  :bind ("C-c t" . google-translate-smooth-translate)
  :custom
  (google-translate-translation-directions-alist . '(("en" . "ja")
                                                     ("ja" . "en")))
  :advice (:override google-translate--search-tkk
                     my--google-translate--search-tkk-override-advice)
  :preface
  (defun my--google-translate--search-tkk-override-advice ()
    "Search TKK." (list 430675 2721866130)))

#+end_src

*** Writable Grep
:PROPERTIES:
:ID:       889d446b-7e66-4870-9ca0-313fd2d097ca
:END:

#+begin_src emacs-lisp

(leaf wgrep
  :straight t
  :bind (grep-mode-map
         ("e" . wgrep-change-to-wgrep-mode)))

#+end_src


*** DDSKK
:PROPERTIES:
:ID:       D4DD8E44-349F-4870-B0F3-C434BFBA6222
:END:

- 個人辞書を =UTF-8= に変換しておく
- =skk-auto-okuri-process= は =nil= にしておかないと， =いぞん (izonn)= など一部の文字の変換ができなくなる.

#+begin_src emacs-lisp

(leaf skk
  :straight ddskk
  :hook
  ((text-mode-hook occur-edit-mode-hook) . (lambda nil
                                             (skk-mode)
                                             (skk-latin-mode-on)))
  :custom ((default-input-method . "japanese-skk")
           (skk-jisyo-code . 'utf-8)
           (skk-large-jisyo . nil)
           (skk-server-host . "localhost")
           (skk-server-portnum . 1179)
           (skk-backup-jisyo . "~/.skk-jisyo.BAK")
           (skk-save-jisyo-instantly . t)
           (skk-share-private-jisyo . t)
           (skk-server-report-response . nil)
           (skk-byte-compile-init-file . t)
           (skk-preload . nil)
           (skk-isearch-mode-enable . 'always)
           (skk-kutouten-type . 'jp)
           (skk-use-auto-kutouten . t)
           (skk-show-inline . 'vertical)
           (skk-inline-show-face . nil)
           (skk-egg-like-newline . t)  ;; skk-kakutei by RET
           (skk-auto-okuri-process . nil)
           (skk-henkan-strict-okuri-precedence . t)
           (skk-auto-insert-paren . t)
           (skk-use-auto-enclose-pair-of-region . t)
           (skk-sticky-key . ";")
           (skk-dcomp-activate . t)
           (skk-dcomp-multiple-activate . t)
           (skk-status-indicator . 'minor-mode)
           (skk-inline-show-face . '( :foreground "#ECEFF4"
                                      :background "#4C566A"
                                      :inherit 'normal)))
  :config
  (if (memq window-system '(x pgtk))
      (setq skk-jisyo "~/.skk-jisyo"))

  (defun my-variable-watcher-for-skk-henkan-mode (symbol newval operation where)
    "Watcher function for variable `skk-henkan-mode'."
    (if (memq newval '(active on))
        (setq-local lsp-bridge-complete-manually t)
      (setq-local lsp-bridge-complete-manually nil))
    )

  (add-variable-watcher 'skk-henkan-mode 'my-variable-watcher-for-skk-henkan-mode)

)
#+end_src

*** Managing Whitespaces with whitespace
:PROPERTIES:
:ID:       1fe97d2c-476d-4660-b14d-e03c95d9b8d2
:END:

#+begin_src emacs-lisp
(leaf whitespace
  :straight t
  :commands whitespace-mode
  :custom ((whitespace-style . '(face
                                trailing
                                tabs
                                spaces
                                empty
                                space-mark
                                tab-mark))
           (whitespace-display-mappings . '((space-mark ?\u3000 [?\u25a1])
                                            (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])))
           (whitespace-space-regexp . "\\(\u3000+\\)")
           (whitespace-global-modes . '(emacs-lisp-mode shell-script-mode sh-mode python-mode org-mode))
           (global-whitespace-mode . t)
           )
)
#+end_src

*** Know Your HTTP Well
:PROPERTIES:
:ID:       b7328135-b20d-46d9-9d7f-7624b9c664b9
:END:

https://github.com/for-GET/know-your-http-well

HTTP encodings, headers, media types, methods, relations and status codes, all summarized and linking to their specification.

#+begin_src emacs-lisp
(leaf know-your-http-well
  :doc
  """
  HTTP encodings, headers, media types, methods, relations and status codes, all summarized and linking to their specification.

  M-x http-header ;; content-type
  M-x http-method ;; post | POST
  M-x http-relation ;; describedby
  M-x http-status-code ;; 500
  M-x http-status-code ;; not_found | NOT_FOUND
  """
  :straight t)

  #+end_src

*** Copilot chat

#+begin_src emacs-lisp :tangle yes
(leaf copilot-chat
  :straight (copilot-chat
             :host github
             :repo "chep/copilot-chat.el"
             :files ("*.el"))
  :after org
  :require t)
#+end_src

* Window Management

Window management commands are accessible by prefix =C-x w=

** Window History with winner-mode
:PROPERTIES:
:ID:       E95C41F6-D98A-4489-80E6-298CDEB889A0
:END:

#+begin_src emacs-lisp

(leaf winner
  :doc "Restore old window configurations"
  :tag "builtin"
  :bind (("C-x <right>" . winner-redo)
         ("C-x <left>" . winner-undo)
         ("C-x w r")
         ("C-x w u"))
  :hook (emacs-startup-hook . winner-mode))

#+end_src

** Window Selection with ace-window
:PROPERTIES:
:ID:       A6B04DF4-7F0D-433B-9162-354A5B7E4B00
:END:

#+begin_src emacs-lisp

(leaf ace-window
  :doc "Quickly switch windows."
  :req "avy-0.5.0"
  :tag "location" "window"
  :url "https://github.com/abo-abo/ace-window"
  :straight t
  :bind* ("C-t" . ace-window)
  :custom (aw-keys . '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :custom-face
  ((aw-leading-char-face . '((t (:height 4.0 :foreground "red")))))
  :config
  (defun my--switch-window (&optional num)
    (interactive "P")
    (unless (integerp num)
      (let ((key (event-basic-type last-command-event)))
        (setq num (- key ?0))))

    (let* ((wnd-list (aw-window-list))
           (wnd-num (1- (min num (length wnd-list))))
           (wnd (nth wnd-num wnd-list)))
      (aw-switch-to-window wnd)))

  (dotimes (i 9)
    (global-set-key (vector (append '(super) (list (+ i 1 ?0))))
                    #'my--switch-window)))

#+end_src

*** Another implementation of my--switch-window
:PROPERTIES:
:ID:       ed56290a-b2aa-4c5b-bd8b-3dea42726539
:END:

#+begin_src emacs-lisp

(defun my--switch-window (num)
  (let* ((wnd-list (aw-window-list))
         (wnd-num (- (min num (length wnd-list)) 1))
         (wnd (nth wnd-num wnd-list)))
    (aw-switch-to-window wnd)))

(eval
 `(progn
    ,@(mapcar
       (lambda (elm)
         `(global-set-key
           (kbd ,(format "s-%s" elm))
           (lambda nil (interactive) (my--switch-window ,elm))))
       (number-sequence 1 9))))

#+end_src

** Window Movement with windmove
:PROPERTIES:
:ID:       0eb9f40f-8826-48e6-bf0d-fe12c27631bf
:END:

#+begin_src emacs-lisp

(leaf *windmove
  :bind (("s-h" . windmove-left)
         ("s-j" . windmove-down)
         ("s-k" . windmove-up)
         ("s-l" . windmove-right)))

#+end_src

** Resize Window
:PROPERTIES:
:ID:       66A46ED2-02C6-40B4-B9CA-901361FA7461
:END:

#+begin_src emacs-lisp

(leaf my-window-resizer
  :doc "Control window size and position."
  :bind (("C-x w s" . my-window-resizer)
         ("C-x w m" . maximize-window)
         ("C-x w b" . balance-windows)
         ("C-x w d" . delete-frame)
         ("C-x w t" . tear-off-window))
  :preface
  (defun my-window-resizer()
    "Control window size and position."
    (interactive)
    (let ((window-obj (selected-window))
          (current-width (window-width))
          (current-height (window-height))
          (dx (if (= (nth 0 (window-edges)) 0) 1
                -1))
          (dy (if (= (nth 1 (window-edges)) 0) 1
                -1))
          action c)
      (catch 'end-flag
        (while t
          (setq action
                (read-key-sequence-vector (format "size[%dx%d]"
                                                  (window-width)
                                                  (window-height))))
          (setq c (aref action 0))
          (cond ((= c ?l)
                 (enlarge-window-horizontally dx))
                ((= c ?h)
                 (shrink-window-horizontally dx))
                ((= c ?j)
                 (enlarge-window dy))
                ((= c ?k)
                 (shrink-window dy))
                ;; otherwise
                (t
                 (let ((last-command-char (aref action 0))
                       (command (key-binding action)))
                   (when command
                     (call-interactively command)))
                 (message "Quit")
                 (throw 'end-flag t))))))))

#+end_src


** Split and follow
:PROPERTIES:
:ID:       eee65492-f4d7-4eff-94ca-e540b97f046d
:END:
#+begin_src emacs-lisp
(defun split-and-follow-horizontally ()
  "Split and follow horizontally."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  "Split and follow vertically."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
** Tab management
:PROPERTIES:
:ID:       E76C0A4A-586E-4086-B576-99102F0D9724
:END:

#+begin_src emacs-lisp

(leaf tab-bar
  :doc "frame-local tabs with named persistent window configurations"
  :tag "builtin"
  :bind (("C-x t n" . tab-new)
         ("C-x t r" . tab-bar-rename-tab)
         ("s-]" . tab-bar-switch-to-next-tab)
         ("s-[" . tab-bar-switch-to-prev-tab))
  :custom ((tab-bar-show . 1)
           (tab-bar-new-button-show . nil)
           (tab-bar-close-button-show . nil)
           (tab-bar-select-tab-modifiers . '(meta)))
  :hook (after-init-hook . my--init-tab-bar)
  :config
  (defun my/tab-new-with-name (&optional name)
    (interactive "sName: ")
    (tab-new)
    (if name (tab-bar-rename-tab name)))

  (defun my--init-tab-bar nil
    (tab-bar-mode 1)
    (tab-bar-rename-tab "Work")
    (my/tab-new-with-name "Env")
    (my/tab-new-with-name "Any")))

(leaf tabspaces
  :straight (tabspaces
             :type git
             :host github
             :repo "mclear-tools/tabspaces")
  :after consult
  :hook (after-init-hook . tabspaces-mode)
  ;; :commands (tabspaces-switch-or-create-workspace
  ;;            tabspaces-open-or-create-project-and-workspace)
  :custom ((tabspace-use-filtered-buffers-as-default . t)
           (tabspaces-default-tab . "Work")
           (tabspaces-remove-to-default . t)
           (tabspaces-include-buffers . '("*scratch*")))
  :defer-config
  ;; hide full buffer list (still available with "b" prefix)
  (consult-customize consult--source-buffer :hidden t :default nil)
  ;; set consult-workspace buffer list
  (defvar consult--source-workspace
    (list :name     "Workspace Buffers"
          :narrow   ?w
          :history  'buffer-name-history
          :category 'buffer
          :state    #'consult--buffer-state
          :default  t
          :items    (lambda () (consult--buffer-query
                                :predicate #'tabspaces--local-buffer-p
                                :sort 'visibility
                                :as #'buffer-name)))

    "Set workspace buffer list for consult-buffer.")
  (add-to-list 'consult-buffer-sources 'consult--source-workspace))
#+end_src

** Rotate Window Layout
:PROPERTIES:
:ID:       CB3337CE-AE80-4668-B754-7BC007AACA12
:END:

#+begin_src emacs-lisp

(leaf rotate
  :doc "Rotate the layout of emacs"
  :url "https://github.com/daichirata/emacs-rotate"
  :straight t
  :bind (("C-x w l"))
  :chord (("rl" . rotate-layout)
          ("rw" . rotate-window)))

#+end_src


** Set Margins
:PROPERTIES:
:ID:       4837B3E1-C7EF-4300-B52B-184ED9123165
:END:

#+begin_src emacs-lisp

(leaf visual-fill-column
  :straight t
  :custom ((visual-fill-column-width . 120)
           (visual-fill-column-center-text . t))
  :hook (org-mode-hook . visual-fill-column-mode))

#+end_src

** Control Buffer Placement
:PROPERTIES:
:ID:       0993136C-F04A-42D0-8FBC-C143A5991F04
:END:

Emacs' default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow.  The =display-buffer-alist= variable controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.

#+begin_src emacs-lisp

(setq display-buffer-base-action
      '(display-buffer-reuse-mode-window
        display-buffer-reuse-window
        display-buffer-same-window))

;; If a popup does happen, don't resize windows to be equal-sized
(setq even-window-sizes nil)

;; (setq split-height-threshold nil)
;; (setq split-width-threshold nil)

#+end_src

* Completion System
** Duplicate line or selected regions with Duplicate-thing
:PROPERTIES:
:ID:       8C227C3B-7CCF-44D5-8D77-6928499CCDF4
:END:

#+begin_src emacs-lisp

(leaf duplicate-thing
  :doc "Duplicate current line & selection"
  :tag "selection" "line" "duplicate" "command" "convenience"
  :url "https://github.com/ongaeshi/duplicate-thing"
  :straight t
  :bind ("M-c" . duplicate-thing))

#+end_src

** Multiple cursors
:PROPERTIES:
:ID:       6CF0AEB8-66DA-4730-8E60-A34059225471
:END:

#+begin_src emacs-lisp

(leaf multiple-cursors
  :doc "Multiple cursors for Emacs."
  :req "cl-lib-0.5"
  :straight t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ("C-M-SPC" . mc/mark-all-dwim-or-mark-sexp))
  :preface
  (defun mc/edit-lines-or-string-rectangle (s e)
    "C-x r tで同じ桁の場合にmc/edit-lines (C-u M-x mc/mark-all-dwim)"
    (interactive "r")
    (if (eq (save-excursion (goto-char s) (current-column))
            (save-excursion (goto-char e) (current-column)))
        (call-interactively 'mc/edit-lines)
      (call-interactively 'string-rectangle)))

  (defun mc/mark-all-dwim-or-mark-sexp (arg)
    "C-u C-M-SPCでmc/mark-all-dwim, C-u C-u C-M-SPCでC-u M-x mc/mark-all-dwim"
    (interactive "p")
    (cl-case arg
      (16 (mc/mark-all-dwim t))
      (4 (mc/mark-all-dwim nil))
      (1 (mark-sexp 1)))))

#+end_src


** Completion Actions with Embark
:PROPERTIES:
:ID:       3478F4D8-F6AC-493B-BAC8-C69D4D2CBF30
:END:

#+begin_src emacs-lisp

(leaf embark
  :straight t embark-consult
  :bind (("C-," . embark-act)
         ("C-;" . embark-dwim)
         ("C-. b" . embark-bindings)
         (:minibuffer-local-map
          ("C-c C-e" . embark-export)))
  :hook (embark-collect-mode-hook . consult-preview-at-point-mode)
  :init (require 'embark-consult)
  :config
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

#+end_src

** Consult Commands
:PROPERTIES:
:ID:       DCD9365F-8EE8-46EB-9EF0-722894C88A55
:END:

#+begin_src emacs-lisp

(leaf consult
  :straight t
  :require t
  :chord ("gl" . consult-goto-line)
  :hook
  ((shell-mode-hook eshell-mode-hook) . (lambda ()
                                          (setq completion-in-region-function
                                                #'consult-completion-in-region)))
  :bind* ("C-x C-b b" . consult-bookmark)
  :bind
  (([remap switch-to-buffer] . consult-buffer) ; C-x b
   ([remap yank-pop] . consult-yank-pop)       ; M-y
   ([remap goto-line] . consult-goto-line)     ; M-g g
   ([remap repeat-complex-command] . consult-complex-command) ; C-x M-: or C-x Esc Esc
   ([remap org-open-at-point] . consult-outline)
   ("C-c s" . my-consult-line)
   ("C-M-r" . consult-recent-file)
   ("C-S-s" . consult-imenu)
   ("C-c g" . consult-ripgrep)
   ("C-c f" . consult-find)
   ;; ("C-c C-j" . consult-mark)
   )
  :preface
  (defun my-consult-line (&optional at-point)
    "Consult-line uses things-at-point if set C-u prefix."
    (interactive "P")
    (if at-point
        (consult-line (thing-at-point 'symbol))
      (consult-line)))
  :advice (;; Optionally tweak the register preview window.
           ;; This adds thin lines, sorting and hides the mode line of the window.
           (:override register-preview consult-register-window))
  :custom (consult-ripgrep-args . "rg --null --line-buffered --color=never --max-columns=1000 --path-separator / --smart-case --no-heading --with-filename --line-number --search-zip --no-ignore --hidden --glob !.git")
  :config
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key (list :debounce 0.4 'any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   ;; :preview-key "M-."
   )

  (leaf consult-dir
    :after consult
    :straight t
    :bind (("C-c d" . consult-dir)
           (:vertico-map
            ("C-c d" . consult-dir)
            ("C-x j" . consult-dir-jump-file))))

  (leaf consult-ghq
    :after consult
    :straight t
    :bind (("C-s-f" . consult-ghq-find)
           ("C-s-g" . consult-ghq-grep)))

  (leaf consult-tramp
    :straight (consult-tramp
               :type git
               :host github
               :repo "Ladicle/consult-tramp")
    :custom ((tramp-default-method . "ssh")
             (consult-tramp-method . "ssh"))
    :commands consult-tramp)
  )
#+end_src

** Candidate Filtering
:PROPERTIES:
:ID:       D7AA94B4-0150-454B-B68D-15C7F78D554D
:END:

#+begin_src emacs-lisp
(leaf fussy
  :straight t
  :custom ((completion-category-defaults . nil)
           (completion-category-overrides . ((command (styles fussy basic))
                                             (consult-multi (styles fussy basic))))
           (fussy-filter-fn . 'fussy-filter-default)
           (fussy-score-fn . 'fussy-fuz-score))
  :config
  (push 'fussy completion-styles)
  (with-eval-after-load 'acm
    ;; use setq because fussy-score-fn is not included in match type 
    ;; (setq acm-candidate-match-function fussy-filter-fn)
    (setopt acm-candidate-match-function 'regexp-quote))

  :init
  (leaf fuz
    :straight (fuz :type git :host github :repo "rustify-emacs/fuz.el")
    :require t
    :config
    (setq fussy-score-fn 'fussy-fuz-score)
    (unless (require 'fuz-core nil t)
      (fuz-build-and-load-dymod))))

;; (leaf orderless
;;   :straight t
;;   :commands (orderless-filter)
;;   :custom ((completion-category-overrides . ((command (styles orderless-default-style))
;;                                              (consult-multi (styles orderless-default-style)))))
;;   :config
  

  
;;   (leaf migemo
;;     :when (executable-find "cmigemo")
;;     :straight (migemo
;;                :type git
;;                :host github
;;                :repo "emacs-jp/migemo")
;;     :require t
;;     :custom
;;     `((migemo-user-dictionary  . nil)
;;       (migemo-regex-dictionary . nil)
;;       (migemo-coding-system    . 'utf-8)
;;       (migemo-dictionary . ,(cond
;;                              ((file-exists-p "/usr/local/share/migemo/utf-8/migemo-dict")
;;                               "/usr/local/share/migemo/utf-8/migemo-dict")
;;                              ((file-exists-p "/opt/homebrew/opt/cmigemo/share/migemo/utf-8/migemo-dict")
;;                               "/opt/homebrew/opt/cmigemo/share/migemo/utf-8/migemo-dict")
;;                              (t "")))
;;       (migemo-isearch-enable-p . t))
;;     :config
;;     (leaf orderless
;;       :config
;;       (defun orderless-migemo (component)
;;         (let ((pattern (migemo-get-pattern component)))
;;           (condition-case nil
;;               (progn (string-match-p pattern "") pattern)
;;             (invalid-regexp nil))))

;;       (orderless-define-completion-style
;;           orderless-migemo-style
;;         (orderless-matching-styles '(orderless-regexp
;;                                      orderless-flex
;;                                      orderless-migemo)))

;;       (dolist (elm '((file (styles orderless-migemo-style))
;;                      ;; for consult-line
;;                      (citar-reference (styles orderless-migemo-style))
;;                      (consult-location (styles orderless-migemo-style))
;;                      (imenu (styles orderless-migemo-style))
;;                      (org-roam-node (styles orderless-migemo-style))
;;                      (unicode-name (styles orderless-migemo-style))))
;;         (add-to-list 'completion-category-overrides elm)))
;;     (migemo-init)
;;     )
;; )


#+end_src

** Completion Annotations with Marginalia
:PROPERTIES:
:ID:       478D315B-CDE3-4945-8F9D-51C22E6276F8
:END:

#+begin_src emacs-lisp

(leaf marginalia
  :straight t
  :require t
  :after vertico
  :global-minor-mode t)

#+end_src

** Vertical Minibuffer UI and Completion with Vertico
:PROPERTIES:
:ID:       5EF084C2-FF2B-4EB9-B299-667014183874
:END:

#+begin_src emacs-lisp

(leaf vertico
  :straight (vertico
             :files (:defaults "extensions/*")
             :includes (vertico-buffer
                        vertico-directory
                        vertico-multiform))
  :custom ((vertico-count . 10)
           (vertico-cycle . t))
  :hook (emacs-startup-hook . (lambda ()
                                (vertico-mode)
                                (savehist-mode))))

(leaf vertico-directory
  :after vertico
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay-hook . vertico-directory-tidy)
  :bind (:vertico-map
         ("DEL"   . vertico-directory-delete-char)
         ("M-DEL" . vertico-directory-delete-word)
         ("C-w"   . vertico-directory-delete-word)
         ("RET"   . vertico-directory-enter)))

(leaf vertico-posframe
  :disabled t
  :straight t
  :after vertico
  :when (display-graphic-p)
  :hook
  ((vertico-mode-hook . my--enable-vertico-posframe-mode)
   (before-make-frame-hook . my--disable-vertico-posframe-mode))
  :custom
  `((vertico-posframe-poshandler . 'posframe-poshandler-frame-bottom-center)
    (vertico-posframe-width . 155)
    (vertico-posframe-border-width . 5)
    (vertico-multiform-categories . '((file posframe)
                                      (citar-reference posframe)
                                      (command posframe)
                                      (consult-location posframe)
                                      (consult-multi posframe)
                                      (org-roam-node posframe)
                                      (completing-read posframe)
                                      ))
    (vertico-multiform-commands . '((consult-imenu buffer)
                                    (execute-extended-command posframe)
                                    (helpful-function posframe)
                                    (helpful-symbol posframe)
                                    (helpful-variable posframe))))
  :config
  (defun my--enable-vertico-posframe-mode ()
    (vertico-posframe-mode)
    (vertico-multiform-mode))

  (defun my--disable-vertico-posframe-mode ()
    (when (not (display-graphic-p))
      (vertico-posframe-mode -1)
      (vertico-multiform-mode -1))))
#+end_src


** Completions in Regions with Corfu
:PROPERTIES:
:ID:       84C57683-673C-4ED5-8305-2C3C3D3DAD0C
:END:

#+begin_src emacs-lisp

(leaf corfu
  :disabled nil
  :straight t
  :global-minor-mode global-corfu-mode corfu-popupinfo-mode
  :custom
  ((corfu-excluded-modes . '(sh-mode
                             shell-mode
                             eshell-mode
                             python-mode
                             ;; yaml-mode
                             ;; typescript-mode
                             ;; js-mode
                             ))
   (corfu-auto . t)
   (corfu-auto-delay . 0)
   (corfu-popupinfo-delay . '(0.1 . 0.1))
   (corfu-auto-prefix . 1)
   (corfu-preselect-first . nil)
   (corfu-quit-no-match . 'separator)

   ;; Enable indentation+completion using the TAB key.
   ;; `completion-at-point' is often bound to M-TAB.
   (tab-always-indent . 'complete)
   (tab-first-completion . 'word))
  :hook ((java-mode-hook . my/corfu-remap-tab-command)
         (minibuffer-setup-hook . my/corfu-enable-in-minibuffer))

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:corfu-map
         ("<tab>" . corfu-complete))
  :init
  (defun my/corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (setq-local corfu-auto nil)
      (corfu-mode 1)))

  (defun my/corfu-remap-tab-command ()
    (global-set-key [remap c-indent-line-or-region] #'indent-for-tab-command))
  )

(leaf cape
  :disabled nil
  :straight t
  :require t dabbrev
  :custom (cape-dabbrev-min-length . 2)
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line))
  :hook ((prog-mode-hook . my--set-basic-capf)
         (text-mode-hook . my--set-basic-capf))
  :init
  (defun my--convert-capf-super (arg-capf)
    (list (cape-capf-buster
           (cape-capf-super arg-capf #'cape-dabbrev))
          #'cape-file))

  (defun my--set-basic-capf ()
    (setq-local completion-at-point-functions
                (my--convert-capf-super (car completion-at-point-functions))))

  :config
  (add-to-list 'completion-at-point-functions #'cape-file t)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev t)
  (add-to-list 'completion-at-point-functions #'cape-keyword t))


;; Dabbrev works with Corfu
(leaf dabbrev
  :doc """Cited from Sec. 3.1.8.2 at https://protesilaos.com/dotemacs/#h:675ebef4-d74d-41af-808d-f9579c2a5ec4

    ```
    Whereas dabbrev-completion benefits from minibuffer interactivity and the pattern matching styles in effect (Completion framework and extras). With the help of Corfu, the completion candidates are displayed in a pop-up window near point (Corfu for in-buffer completion).

    The dabbrev-abbrev-char-regexp is configured to match both regular words and symbols (e.g. words separated by hyphens). This makes it equally suitable for code and ordinary language.

    While the dabbrev-abbrev-skip-leading-regexp is instructed to also expand words and symbols that start with any of these: $, *, /, =, ~, '. This regexp may be expanded in the future, but the idea is to be able to perform completion in contexts where the known word/symbol is preceded by a special character. For example, in the org-mode version of this document, all inline code must be placed between the equals sign. So now typing the =, then a letter, will still allow me to expand text based on that input.w
    ```
  """
  :leaf-defer nil
  :require t
  :custom ((dabbrev-abbrev-char-regexp . "\\sw\\|\\s_")
           (dabbrev-abbrev-skip-leading-regexp . "[$*/=~']")
           (dabbrev-backward-only . nil)
           (dabbrev-case-distinction . 'case-replace)
           (dabbrev-case-fold-search . nil)
           (dabbrev-case-replace . 'case-replace)
           (dabbrev-check-other-buffers . t)
           (dabbrev-eliminate-newlines . t)
           (dabbrev-upcase-means-case-search . t))
  :bind* (("M-/" . dabbrev-expand)
          ("C-M-/" . dabbrev-completion)))

#+end_src

** Colorful icons for completion with kind-icon
:PROPERTIES:
:ID:       8ae9d8ff-5b42-42d3-bc2a-46d13cb0ee56
:END:

#+begin_src emacs-lisp

(leaf kind-icon
  :straight t
  :after corfu
  :custom
  ;; to compute blended backgrounds correctly
  (kind-icon-default-face . 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src


** Front-end for citation with Citar
:PROPERTIES:
:ID:       8a8e08e1-28cf-4323-a41e-a80091184685
:END:

#+begin_src emacs-lisp

(leaf citar
  :disabled t
  :straight t
  :bind (("C-c b" . citar-insert-citation)
         (:minibuffer-local-map
          ("M-b" . citar-insert-preset)))
  :custom
  ((citar-bibliography . '("~/org/braindump/preferences/ref.bib"))
   (citar-latex-cite-commands . '((("cite" "citet" "citep") . (t))))))

#+end_src


* Moving in buffer
** Jumping with Avy
:PROPERTIES:
:ID:       EC8B3264-A96A-4622-9A16-A8E7AED23B11
:END:

#+begin_src emacs-lisp

(leaf avy
  :doc "Jump to arbitrary positions in visible text and select text quickly."
  :req "emacs-24.1" "cl-lib-0.5"
  :tag "location" "point" "emacs>=24.1"
  :url "https://github.com/abo-abo/avy"
  :straight t
  :bind* ("C-q" . avy-goto-char-timer)
  :custom ((avy-styles-alist . '((avy-goto-char-timer . pre)))
           (avy-timeout-seconds . 0.5)
           (avy-keys . '( ?q ?e ?r ?u ?o ?p
                          ?a ?s ?d ?f ?g ?h ?j ?l ?'
                          ?c ?v ?b ?n ?, ?/)))
  :config
  ;; orverride avy function
  (defun avy-show-dispatch-help ()
    "Display action shortucts in echo area."
    (let* ((len (length "avy-action-"))
           (fw (frame-width))
           (raw-strings (mapcar
                         (lambda (x)
                           (format "%2s: %-19s"
                                   (propertize
                                    (char-to-string (car x))
                                    'face 'aw-key-face)
                                   (substring (symbol-name (cdr x)) len)))
                         avy-dispatch-alist))
           (max-len (1+ (apply #'max (mapcar #'length raw-strings))))
           (strings-len (length raw-strings))
           (per-row (floor fw max-len))
           display-strings)
      (cl-loop for string in raw-strings
               for N from 1 to strings-len do
               (push (concat string " ") display-strings)
               (when (= (mod N per-row) 0) (push "\n" display-strings)))
      (message "%s" (apply #'concat (nreverse display-strings)))))

  ;; Kill text
  (defun avy-action-kill-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (kill-whole-line))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
        (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)

  ;; Copy text
  (defun avy-action-copy-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (cl-destructuring-bind (start . end)
          (bounds-of-thing-at-point 'line)
        (copy-region-as-kill start end)))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (setf (alist-get ?w avy-dispatch-alist) 'avy-action-copy
        (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line)

  ;; Yank text
  (defun avy-action-yank-whole-line (pt)
    (avy-action-copy-whole-line pt)
    (save-excursion (yank))
    t)

  (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
        (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line)

  ;; Transpose/Move text
  (defun avy-action-teleport-whole-line (pt)
    (avy-action-kill-whole-line pt)
    (save-excursion (yank)) t)

  (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
        (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)

  ;; Mark text
  (defun avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char pt))

  (setf (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char)

  ;; Flyspell words
  (defun avy-action-flyspell (pt)
    (save-excursion
      (goto-char pt)
      (when (require 'flyspell nil t)
        (flyspell-auto-correct-word)))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)

  ;; Bind to semicolon (flyspell uses C-;)
  (setf (alist-get ?\; avy-dispatch-alist) 'avy-action-flyspell)


  ;; Get Elisp Help
  ;; Replace with your package manager or help library of choice
  (defun avy-action-helpful (pt)
    (save-excursion
      (goto-char pt)
      (helpful-at-point))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)

  (setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful)

  ;; Embark
  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t))
#+end_src


** Jumping beginning/end of line with mwim
:PROPERTIES:
:ID:       D8F51490-CACF-4A50-B0B8-2ADC6B58951B
:END:

#+begin_src emacs-lisp

(leaf mwim
  :doc "Switch between the beginning/end of line or code"
  :tag "convenience"
  :url "https://github.com/alezost/mwim.el"
  :straight t
  :bind (("C-a" . mwim-beginning-of-code-or-line)
         ("C-e" . mwim-end-of-code-or-line)))

#+end_src

* Shell

** Eshell
:PROPERTIES:
:ID:       9B62F055-8080-4CFB-939E-89A80EFB5365
:END:

#+begin_src emacs-lisp

(leaf eshell
  :bind* ("C-x m" . eshell)
  :config
  (leaf em-alias
    :defer-config
    (eshell/alias "dua" "du -shc * | sort -h")
    (eshell/alias "ll" "ls -l")
    (eshell/alias "bd" "cd ../")
    (eshell/alias "e" "emacsclient $1"))

  (leaf eshell-p10k
    :disabled t
    :straight (eshell-p10k
               :type git
               :host github
               :repo "elken/eshell-p10k")
    :config
    (eshell-p10k-def-segment time
                             ""
                             (format-time-string "%H:%M" (current-time))
                             'eshell-p10k-distro-face)
    (defun eshell-p10k-prompt-function ()
      "Prompt defining function."
      (eshell-p10k-def-prompt '(distro dir git prompt-num time)))

    (setq eshell-prompt-function #'eshell-p10k-prompt-function
          eshell-prompt-regexp eshell-p10k-prompt-string)))

#+end_src

** Fish Mode
:PROPERTIES:
:ID:       BD30FB24-87F8-4503-BCE5-2DC188CF290C
:END:

#+begin_src emacs-lisp

(leaf fish-mode
  :doc "Major mode for fish shell scripts"
  :req "emacs-24"
  :tag "shell" "fish" "emacs>=24"
  :straight t)

#+end_src

** Nix Mode
:PROPERTIES:
:ID:       2f2a58e9-8e25-4892-bbac-fddeb7326ee2
:END:

#+begin_src emacs-lisp
(leaf nix-mode
  :straight t
  :mode "\\.nix\\'")
#+end_src

** Vterm Mode
:PROPERTIES:
:ID:       112E45C3-62F0-4088-B8AC-43003F942FEA
:END:

#+begin_src emacs-lisp

(leaf vterm
  :straight t
  :custom (vterm-max-scrollback . 10000)
  :config
  (leaf vterm-toggle
    :straight t
    :bind (("C-M-'" . vterm-toggle)
           (vterm-mode-map
            ("C-<return>" . vterm-toggle-insert-cd)))
    :custom ((vterm-toggle-reset-window-configration-after-exit . nil)
             (vterm-toggle-hide-method . 'reset-window-configration)
             )
    ))

#+end_src

* Runtime Performance
** Silent Garbage collection with gcmh
:PROPERTIES:
:ID:       92B6AEEC-6518-4EEA-9E45-5A58BEDCB289
:END:

#+begin_src emacs-lisp

(leaf gcmh
  :straight t
  :blackout
  :custom (gcmh-verbose . nil)
  :hook after-init-hook)

#+end_src

* Org Mode
** Org Configuration
:PROPERTIES:
:ID:       702a5da5-bea0-40e1-805c-f950b76d4012
:END:

#+begin_src emacs-lisp

(leaf org
  :straight t
  :when window-system
  :doc "Export Framework for Org Mode"
  :mode "\\.org\\'"
  :hook (org-mode-hook . (lambda nil
                           (setq-local line-spacing 0.4)))
  :custom
  ((org-directory . "~/org/")
   (org-ellipsis . " ▼ ")

   (org-hide-emphasis-markers . t)
   (org-src-window-setup . 'current-window)
   (org-src-fontify-natively . t)
   (org-fontify-quote-and-verse-blocks . t)
   (org-hide-block-startup . nil)
   (org-startup-folded . 'content)
   (org-edit-src-content-indentation . 0)
   (org-startup-indented . t)

   (org-use-speed-commands . t)
   (org-enforce-todo-dependencies . t)
   (org-log-done . t)
   (org-return-follows-link . t)
   (org-highlight-latex-and-related . '(latex script entities))
   (org-confirm-babel-evaluate . nil)
   (org-catch-invisible-edits . 'show)
   (org-preview-latex-image-directory . "~/tmp/ltximg/")
   (search-whitespace-regexp . ".*?")
   (isearch-lazy-count . t)
   (lazy-count-prefix-format . " (%s/%s) ")
   (isearch-yank-on-move . 'shift)
   (isearch-allow-scroll . 'unlimited)
   (org-structure-template-alist . '(("sh" . "src shell")
                                     ("bash" . "src bash")
                                     ("c" . "center")
                                     ("C" . "comment")
                                     ("conf" . "src conf")
                                     ("el" . "src emacs-lisp")
                                     ("ex" . "example")
                                     ("ht" . "export html")
                                     ("lua" . "src lua")
                                     ("tex" . "export latex")
                                     ("q" . "quote")
                                     ("s" . "src")
                                     ("py" . "src python :session :results value")
                                     ("jp" . "src jupyter-python :session py :async yes :kernel torch")
                                     ("js" . "src javascript")
                                     ("ts" . "src typescript")
                                     ("d" . "definition")
                                     ("t" . "theorem")
                                     ("m" . "src mermaid :exports none :file ")
                                     ("mc" . "quoting")
                                     ("mq" . "question")
                                     ("mt" . "todo")
                                     ("ms" . "summary"))))

  :custom-face (org-document-title . '((t (:inherit t :weight bold :height 1.6))))
  :preface
  (setq org-format-latex-options
        '( :foreground default
           :background default
           :scale 1.7
           :html-foreground "Black"
           :html-background "Transparent"
           :html-scale 1.0
           :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

  (defun my/org-mode-hook ()
    (my/set-org-face))

  :config
  (require 'org-tempo)   ;; need for org-template

  (leaf org-fragtog
    :straight t
    :hook (org-mode-hook . org-fragtog-mode))

  (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))

  (defun my/set-org-face nil
    ;; Increase the size of various headings
    (interactive)
    (set-face-attribute 'org-document-title nil
                        :weight 'bold :height 1.6)
    (set-face-attribute 'org-level-1 nil
                        :weight 'bold :slant 'normal :height 1.35)
    (dolist (face '((org-level-2 . 1.3)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.15)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :weight 'medium
                          :slant 'normal
                          :height (cdr face)))

    ;; variable pitch
    (face-remap-add-relative 'default :inherit 'variable-pitch)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))
)
#+end_src

** Org Agenda
:PROPERTIES:
:ID:       8BD07743-2B52-489B-B44C-ECBDA35CD5FB
:END:

#+begin_src emacs-lisp
(leaf org-agenda
  :when window-system
  :bind* (("C-c C-a" . my/org-agenda-cache))
  :custom
  `((org-agenda-window-setup . 'other-window)
    (org-agenda-block-separator . nil)
    (org-agenda-start-with-log-mode . t)
    ;; speed up techniques
    (org-agenda-dim-blocked-tasks . nil)
    (org-agenda-use-tag-inheritance . '(search timeline agenda))
    (org-agenda-ignore-drawer-properties . '(effort appt category))
    ;; show agenda from today
    (org-agenda-start-on-weekday . nil)
    (org-agenda-current-time-string . "← now")
    (org-agenda-time-grid quote ;; Format is changed from 9.1
                          ((daily today require-timed)
                           (0700 1200 1700 2200)
                           "-"
                           "────────────────"))
    (org-columns-default-format
     quote
     "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)"))
  :preface
  (defun my/org-agenda-cache (&optional regenerate)
    "Show agenda buffer without updating if it exists"
    (interactive "P")
    (if (or regenerate (null (get-buffer "*Org Agenda*")))
        (progn
          (setq current-prefix-arg nil)
          (org-agenda nil "a"))
      (org-switch-to-buffer-other-window "*Org Agenda*")))

  :defer-config
  (leaf org-agenda
    :hook ((kill-emacs-hook . ladicle/org-clock-out-and-save-when-exit)
           (org-clock-in-hook . (lambda ()
                                  (org-todo "NEXT"))))
    :bind (org-agenda-mode-map
           ("i" . org-agenda-clock-in)
           ("r" . jethro/org-agenda-process-inbox-item)
           ("R" . org-agenda-refile)
           ("c" . org-capture)
           ("q" . quit-window))
    :preface
    (defvar jethro/org-current-effort "1:00"
      "Current effort for agenda items.")

    (defun jethro/my-org-agenda-set-effort (effort)
      "Set the effort property for the current headline."
      (interactive
       (list (read-string (format "Effort [%s]: " jethro/org-current-effort)
                          nil nil jethro/org-current-effort)))
      (setq jethro/org-current-effort effort)
      (org-agenda-check-no-diary)
      (let* ((hdmarker (or (org-get-at-bol 'org-hd-marker)
                           (org-agenda-error)))
             (buffer (marker-buffer hdmarker))
             (pos (marker-position hdmarker))
             (inhibit-read-only t)
             newhead)
        (org-with-remote-undo buffer
          (with-current-buffer buffer
            (widen)
            (goto-char pos)
            (org-show-context 'agenda)
            (funcall-interactively 'org-set-effort nil jethro/org-current-effort)
            (end-of-line 1)
            (setq newhead (org-get-heading)))
          (org-agenda-change-all-lines newhead hdmarker))))

    (defun jethro/org-agenda-process-inbox-item ()
      "Process a single item in the org-agenda."
      (interactive)
      (org-with-wide-buffer
       (org-agenda-set-tags)
       (org-agenda-priority)
       (call-interactively 'jethro/my-org-agenda-set-effort)
       (org-agenda-refile nil nil t)))

    (defvar jethro/org-agenda-bulk-process-key ?f
      "Default key for bulk processing inbox items.")

    (defun my/bulk-process-entries ()
      (when-let* ((entries (reverse org-agenda-bulk-marked-entries))
                 (processed 0)
                 (skipped 0))
        (dolist (e entries)
          (let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
            (if (not pos)
                (progn (message "Skipping removed entry at %s" e)
                       (cl-incf skipped))
              (goto-char pos)
              (let (org-loop-over-headlines-in-active-region)
                (funcall 'jethro/org-agenda-process-inbox-item))
              ;; `post-command-hook' is not run yet.  We make sure any
              ;; pending log note is processed.
              (when (or (memq 'org-add-log-note (default-value 'post-command-hook))
                        (memq 'org-add-log-note post-command-hook))
                (org-add-log-note))
              (cl-incf processed))))
        (org-agenda-redo)
        (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
        (message "Acted on %d entries%s%s"
                 processed
                 (if (= skipped 0)
                     ""
                   (format ", skipped %d (disappeared before their turn)"
                           skipped))
                 (if (not org-agenda-persistent-marks) "" " (kept marked)"))))

    (defun jethro/org-process-inbox ()
      "Called in org-agenda-mode, processes all inbox items."
      (interactive)
      (org-agenda-bulk-mark-regexp "inbox:")
      (jethro/bulk-process-entries))

    (defun ladicle/org-clock-out-and-save-when-exit ()
      "Save buffers and stop clocking when kill emacs."
      (ignore-errors (org-clock-out) t)
      (save-some-buffers t))

    :config
    (require 'org-habit)
    ;; (require 'org-capture)
    (setq
     gtd/org-agenda-directory (file-truename "~/org/gtd/")
     org-outline-path-complete-in-steps nil
     org-log-done 'time
     org-log-into-drawer t
     org-log-state-notes-insert-after-drawers nil
     org-tag-alist '(("@errand" . ?e)
                     ("@private" . ?p)
                     ("@work" . ?w)
                     (:newline)
                     ("CANCELLED" . ?c))
     org-fast-tag-selection-single-key nil
     org-todo-keywords '((sequence
                          "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                         (sequence
                          "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))
     org-refile-use-outline-path 'file
     org-refile-allow-creating-parent-nodes 'confirm
     org-refile-targets '((org-agenda-files . (:level . 1)))
     org-agenda-bulk-custom-functions `((,jethro/org-agenda-bulk-process-key
                                         jethro/org-agenda-process-inbox-item)))


    (defun my/setup-org-agenda ()
      (interactive)
      (setq org-agenda-files (directory-files gtd/org-agenda-directory t "\\.org$")
            org-agenda-custom-commands
            `(("n" "Agenda and all TODOs"
               ((agenda "")
                (alltodo "")))
              ("a" "Agenda"
               ((agenda ""
                        ((org-agenda-span 'week)
                         (org-deadline-warning-days 365)
                         (org-agenda-prefix-format " %i %-12:c%?- t % s % e")))
                (todo "TODO"
                      ((org-agenda-overriding-header "\nInbox")
                       (org-agenda-files '(,(concat gtd/org-agenda-directory
                                                    "inbox.org")))))
                (todo "NEXT"
                      ((org-agenda-overriding-header "\nIn Progress")))
                (alltodo ""
                         ((org-agenda-overriding-header "\nProjects")
                          (org-agenda-files (directory-files
                                             gtd/org-agenda-directory t
                                             "[^\(inbox\)\(next\)]\\.org$"))))
                (todo "TODO"
                      ((org-agenda-overriding-header "\nOne-off Tasks")
                       (org-agenda-files '(,(concat gtd/org-agenda-directory
                                                    "next.org")))
                       (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                   'deadline)))))))))
    (my/setup-org-agenda)

    (defun jethro/org-archive-done-tasks ()
      "Archive all done tasks."
      (interactive)
      (org-map-entries 'org-archive-subtree "/DONE" 'file))

    (defun jethro/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))

    (defun jethro/skip-projects ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((jethro/is-project-p)
            next-headline)
           (t
            nil)))))

    (leaf org-journal
      :straight t
      :custom `((org-journal-file-type . 'yearly)
                (org-journal-dir . ,(expand-file-name "journal" org-directory))
                (org-journal-file-format . "%Y.org")
                (org-journal-date-format . "%m/%d, %A"))
      :config
      (defun org-journal-find-location ()
        ;; Open today's journal, but specify a non-nil prefix argument in order to
        ;; inhibit inserting the heading; org-capture will insert the heading.
        (org-journal-new-entry t)
        (unless (eq org-journal-file-type 'daily)
          (org-narrow-to-subtree))
        (goto-char (point-max))))

    (leaf org-capture
      :tag "builtin"
      :bind* ("C-c C-m" . org-capture)
      :config
      (defun org-journal-find-location ()
        ;; Open today's journal, but specify a non-nil prefix argument in order to
        ;; inhibit inserting the heading; org-capture will insert the heading.
        (org-journal-new-entry t)
        (unless (eq org-journal-file-type 'daily)
          (org-narrow-to-subtree))
        (goto-char (point-max)))

      (setq org-daily-tasks-file (expand-file-name "daily.org" gtd/org-agenda-directory)
            org-capture-templates
            `(("d" "Weekdays TODO" entry
               (file org-daily-tasks-file) "%[~/org/templates/weekdays-todo.org]" :prepend t)
              ("i" "inbox" entry
               (file ,(concat gtd/org-agenda-directory "inbox.org"))
               "* TODO %?")
              ("j" "Journal entry" plain (function org-journal-find-location)
               "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
               :jump-to-captured t :immediate-finish t))))
    )
  )
#+end_src

** Org Babel
:PROPERTIES:
:ID:       085EBDA5-B180-4BB0-A2CA-45FEC0742421
:END:

#+begin_src emacs-lisp

(setq org-babel-load-languages '((emacs-lisp . t)
                                 (python . t)
                                 (latex . t)
                                 (shell . t)
                                 (lua . t)
                                 (js . t)))

(leaf ob-emacs-lisp
  :straight org
  :commands (org-babel-execute:emacs-lisp))

(leaf ob-python
  :straight org
  :commands (org-babel-execute:python org-babel-load-session:python))

(leaf ob-latex
  :straight org
  :commands (org-babel-execute:latex))

(leaf ob-shell
  :straight org
  :commands
  org-babel-execute:sh
  org-babel-expand-body:sh
  org-babel-execute:shell
  org-babel-expand-body:shell)

(leaf ob-lua
  :straight org
  :commands (org-babel-execute:lua))

(leaf ob-js
  :straight org
  :commands (org-babel-execute:js))
#+end_src

** Org-modern
:PROPERTIES:
:ID:       c4d17b5b-9f46-4755-8275-9383f794c62a
:END:

#+begin_src emacs-lisp
(leaf org-modern
  :straight t
  :hook (org-mode-hook . org-modern-mode)
  :custom-face
  (org-modern-label . '((t :height 0.9 :inherit t)))
  :custom
  ((org-modern-star . ["◉" "○" "◈" "◇" "✳" "★" "✸"])
   (org-modern-list . '((?+ . "➤")
                        (?* . "•")
                        (?- . "-")))
   (org-modern-hide-stars . 'leading)))
#+end_src

** Org-download
:PROPERTIES:
:ID:       41ca5970-5a8c-4134-9932-b07759773230
:END:

#+begin_src emacs-lisp
(leaf org-download
  :straight t
  :require t)
#+end_src

** Presentations

*** org-present
:PROPERTIES:
:ID:       C6039D29-54FA-4E04-BC1A-BE0425E792EC
:END:

=org-present= is the package I use for giving presentations in Emacs.

#+begin_src emacs-lisp

(leaf org-present
  :when window-system
  :straight t
  :bind (org-present-mode-keymap
         ("C-c C-n" . dw/org-present-next)
         ("C-c C-p" . dw/org-present-prev))
  :hook ((org-present-mode-hook . dw/org-present-hook)
         (org-present-mode-quit-hook . dw/org-present-quit-hook))
  :preface
  (defun dw/org-present-prepare-slide ()
    (org-overview)
    (org-show-entry)
    (org-show-children))

  (defun dw/org-present-hook ()
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                       (header-line (:height 4.5) variable-pitch)
                                       (org-document-title (:height 1.75) org-document-title)
                                       (org-code (:height 1.55) org-code)
                                       (org-verbatim (:height 1.55) org-verbatim)
                                       (org-block (:height 1.25) org-block)
                                       (org-block-begin-line (:height 0.7) org-block)))
    (setq header-line-format " ")
    (org-appear-mode -1)
    (org-display-inline-images)
    (dw/org-present-prepare-slide))

  (defun dw/org-present-quit-hook ()
    (setq-local face-remapping-alist '((default variable-pitch default)))
    (setq header-line-format nil)
    (org-present-small)
    (org-remove-inline-images)
    (org-appear-mode 1))

  (defun dw/org-present-prev ()
    (interactive)
    (org-present-prev)
    (dw/org-present-prepare-slide))

  (defun dw/org-present-next ()
    (interactive)
    (org-present-next)
    (dw/org-present-prepare-slide)))

#+end_src

** Cross Reference
:PROPERTIES:
:ID:       0F7789E4-399A-496C-B163-1D6A4DABFC47
:END:

#+begin_src emacs-lisp

(leaf xref
  :doc "Cross-referencing commands"
  :req "emacs-26.3"
  :url "http://elpa.gnu.org/packages/xref.html"
  :straight t
  :after org)

#+end_src


** Outline-based notes management and organizer
*** Export framework Configuration
:PROPERTIES:
:ID:       C538E5FB-6070-4743-B75E-E723492B91A0
:END:

#+begin_src emacs-lisp

(leaf ox
  :doc "Export Framework for Org Mode"
  :custom (org-export-backends . '(ascii html latex beamer odt org extra)))

#+end_src


*** Export Hugo Markdown
:PROPERTIES:
:ID:       E2113B7A-0BAC-403F-BAFB-67F6B6E9D76F
:END:

#+begin_src emacs-lisp

(leaf ox-hugo
  :when window-system
  :doc "Hugo Markdown Back-End for Org Export Engine"
  :straight t
  :require t
  :after ox
  :custom ((org-hugo-front-matter-format . "yaml")
           (org-hugo-link-desc-insert-type . t))
  ;; :defer-config
  ;; (defun c/ox-hugo-add-lastmod nil
  ;;   "Add `lastmod' property with the current time."
  ;;   (interactive)
  ;;   (org-set-property "EXPORT_HUGO_LASTMOD"
  ;;                     (format-time-string "[%Y-%m-%d %a %H:%M]")))

  ;; (leaf *ox-hugo-capture
  ;;     :require org-capture
  ;;     :after org
  ;;     :defvar (org-capture-templates)
  ;;     :config
  ;;     (add-to-list 'org-capture-templates
  ;;                  '("b" "Create new blog post" entry
  ;;                    (file+headline "~/src/omgithub.com/naoking158/blog-src/org/naoki.org" "blog")
  ;;                    "** TODO %?
  ;; :PROPERTIES:
  ;; :EXPORT_FILE_NAME: %(apply #'format \"%s-%s-%s\"
  ;;         (format-time-string \"%Y %m %d\")
  ;; :EXPORT_HUGO_TAGS:
  ;; :EXPORT_HUGO_LASTMOD:
  ;; :END:
  ;; -
  ;; ")
  ;;                  'append))
  )

#+end_src


*** Export Latex
:PROPERTIES:
:ID:       4DBD2DF5-46B9-4132-B769-08B27E5E33DF
:END:

#+begin_src emacs-lisp

(leaf ox-latex
  :when window-system
  :doc "LaTeX Back-End for Org Export Engine"
  :tag "out-of-MELPA" "wp" "calendar" "hypermedia" "outlines"
  :preface
  (defun my-latexmk-command (latex options &optional target output)
    "Generate LatexMk command for LATEX, (LatexMk-)OPTIONS, TARGET and OUTPUT directory."
    (let* ((latex-options
            '("-f" "-src-specials" "-file-line-error" "-interaction=nonstopmode"
              "-shell-escape" "-synctex=1"))
           (luatex-option
            (mapconcat (lambda (opt) (concat "-" opt)) latex-options " "))
           (latex-option
            (mapconcat 'identity latex-options " ")))
      (concat "latexmk -gg " options " "
              (cl-case latex
                (euptex "-pdfdvi -latex='uplatex "))
              (cl-case latex
                (luatex luatex-option)
                (t latex-option))
              "' "
              (if output (concat "-output-directory=" output " "))
              target)))
  :config
  (setq TeX-engine 'euptex)
  (setq org-latex-pdf-process (list (my-latexmk-command TeX-engine "-pv" "%f" "%o")))

  ;; (add-hook 'org-export-before-processing-hook 'my-ox-latex-tex-engine-setup)

;;   (defun my-ox-latex-tex-engine-setup (backend)
;;     (message "backend=%s" backend)
;;     (when (equal backend 'latex)
;;       (my-ox-latex-engine-set TeX-engine)))

;;   (defun my-ox-latex-engine-set (latex)
;;     "Set up LATEX environments."

;;     (setq org-latex-default-class "jsarticle")
;;     (add-to-list 'org-latex-classes
;;                  '("research-note"
;;                    "\\documentclass[openany]{report}\n
;; \\input{../preferences/header.tex}\n
;; \\input{..//preferences/preamble_research_note.tex}\n
;; \\usepackage[whole]{bxcjkjatype}
;; %% \\usepackage{amsmath,amsthm,amssymb}
;; %% \\usepackage{mynotestyle}
;; %% \\usepackage{preamble}
;; [NO-DEFAULT-PACKAGES]
;; [PACKAGES]
;; [EXTRA]"
;;                    ("\\datechapter{%s}" . "\\datechapter{%s}")
;;                    ("\\section{%s}" . "\\section*{%s}")
;;                    ("\\subsection{%s}" . "\\subsection*{%s}")
;;                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
;;                    ))
;;     (add-to-list 'org-latex-classes
;;                  '("article"
;;                    "\\RequirePackage{plautopatch}\n
;; \\documentclass[a4p,uplatex,dvipdfmx]{article}\n
;; \\input{../preferences/header.tex}"
;;                    ("\\section{%s}" . "\\section*{%s}")
;;                    ("\\subsection{%s}" . "\\subsection*{%s}")
;;                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
;;     (add-to-list 'org-latex-classes
;;                  '("jsarticle"
;;                    "\\RequirePackage{plautopatch}\n
;; \\documentclass[a4p,uplatex,dvipdfmx]{jsarticle}\n
;; \\input{../preferences/header.tex}
;; [NO-DEFAULT-PACKAGES]
;; [PACKAGES]
;; [EXTRA]"
;;                    ("\\section{%s}" . "\\section*{%s}")
;;                    ("\\subsection{%s}" . "\\subsection*{%s}")
;;                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    ;; (setq org-latex-pdf-process (list (my-latexmk-command TeX-engine "-pv" "%f" "%o")))
;;     )
  )

#+end_src


** Org Roam
:PROPERTIES:
:ID:       2304CA71-831A-46DB-B88C-38ECB7178BAB
:END:

#+begin_src emacs-lisp
(leaf org-roam
  :when window-system
  :doc "Roam Research replica with Org-mode"
  :url "https://github.com/org-roam/org-roam"
  :straight t
  :bind* (("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
          ("C-c n g" . org-roam-graph)
          ("C-c n i" . org-roam-node-insert)
          ("C-c n c" . org-roam-capture))
  :custom
  `((org-roam-directory . ,(file-truename "~/org/braindump/"))
    (org-roam-db-location . ,(expand-file-name
                              "org-roam.db"
                              (file-truename "~/org/braindump/")))
    (org-roam-db-gc-threshold . most-positive-fixnum)
    (org-id-link-to-org-use-id . t)
    (org-roam-capture-templates
     quote
     (("c" "Concept" plain "%?"
       :target (file+head "concepts/${slug}.org"
                          "#+title: ${title}\n#+date: %U")
       :unnarrowed t)
      ("l" "Literature" plain
       (file "~/org/braindump/preferences/LiteratureTemplate.org")
       :target (file+head "lit/${slug}.org"
                          "#+title: ${title}\n#+date: %U\n#+filetags: Literature")
       :unnarrowed t)
      ;; ("m" "Meeting" plain "%?"
      ;;  :target (file+head "work/${slug}.org"
      ;;                     "#+title: ${title}\n#+filetags: Meeting\n#+options: toc:nil")
      ;;  :unnarrowed t)
      ("w" "Working" plain "%?"
       :target (file+head "work/${slug}.org"
                          "#+title: ${title}\n#+filetags: Working\n#+options: toc:nil")
       :unnarrowed t)
      ("p" "Private" plain "%?"
       :target (file+head "private/${slug}.org"
                          "#+title: ${title}\n#+date: %U\n")
       :unnarrowed t))))

  :defer-config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  ;; for org-roam-buffer-toggle
  ;; Recommendation in the official manual
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))
  (org-roam-db-autosync-mode))
#+end_src


** Bullets
:PROPERTIES:
:ID:       3EE7D4BD-5E91-4BAA-89E6-7011F7936B77
:END:

#+begin_src emacs-lisp

(leaf org-superstar
  :disabled t
  :straight t
  :after org
  :hook (org-mode-hook . org-superstar-mode)
  :custom
  ((org-superstar-remove-leading-stars . nil)
   (org-superstar-headline-bullets-list . '( "●" "○" "◉" "◇" "✿" "✸" " " ))
   (org-superstar-item-bullet-alist . '((?+ . ?➤)
                                        (?* . ?-)
                                        (?- . ?•)))))

#+end_src


** Image Handling
*** Insert Clipboard Image
:PROPERTIES:
:ID:       C654D00B-A808-4567-81DF-FF5E2A312454
:END:

#+begin_src emacs-lisp

(setq paste-cmd (cond
                 ((executable-find "pngpaste")
                  "pngpaste ")
                 ((executable-find "xclip")
                  "xclip -selection clipboard -t image/png -out > ")
                 (t nil)))

(leaf *org-insert-clipboard-image
  :when paste-cmd
  :after org
  :bind ("C-M-y" . org-insert-clipboard-image)
  :preface
  (defun org-insert-clipboard-image ()
    "Generate png file from a clipboard image and insert a link to current buffer."
    (interactive)
    (let* ((filename
            (concat "imgs/"
                    (file-name-sans-extension (file-name-nondirectory
                                               (buffer-file-name)))
                    (format-time-string "_%Y%m%d_%H%M%S")
                    ".png")))
      (unless (file-exists-p (file-name-directory filename))
        (make-directory (file-name-directory filename)))
      (shell-command (concat paste-cmd filename))
      (if (file-exists-p filename)
          (insert (concat "[[file:" filename "]]")))
      (org-display-inline-images))))

#+end_src

*** Adjust Inline Image Size
:PROPERTIES:
:ID:       5B20E29B-13D3-4D56-A488-DDDFFD505365
:END:

#+begin_src emacs-lisp

(leaf *org-image-size-adjuster
  :advice (:before
           org-toggle-inline-images
           (lambda (&rest args)
             (setq-local org-image-actual-width
                         (truncate (* 0.8 (window-text-width nil t))))))
  )

#+end_src

** Auto-show Markup Symbols
:PROPERTIES:
:ID:       3A1C4173-A2A0-4BAB-BCF2-34809552E796
:END:

This package makes it much easier to edit Org documents when =org-hide-emphasis-markers= is turned on.  It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them.  No more fumbling around with ~=~ and ~*~ characters!

#+begin_src emacs-lisp

(leaf org-appear
  :straight t
  :hook org-mode-hook)

#+end_src

** Auto-tangle Configuration Files
:PROPERTIES:
:ID:       B67C93C4-B55C-4122-997E-65D4B38764EE
:END:

#+begin_src emacs-lisp

(leaf *auto-tangle-configuration
  :hook (org-mode-hook . (lambda ()
                           (add-hook 'after-save-hook
                                     #'my/org-babel-tangle-config)))
  :defun my/org-babel-tangle-config
  :preface
  ;; Automatically tangle my Emacs.org Config file when I save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (file-truename "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle)))))

#+end_src

** Update Table of Contents on Save
:PROPERTIES:
:ID:       13DD0191-EB5C-47D0-A7C2-14CAA61F30BD
:END:

It's nice to have a table of contents section for long literate configuration files (like this one!) so I use =org-make-toc= to automatically update the ToC in any header with a property named =TOC=.

#+begin_src emacs-lisp

(leaf org-make-toc
  :straight t
  :hook (org-babel-pre-tangle-hook . org-make-toc-mode))

#+end_src

** Edit-indirect
:PROPERTIES:
:ID:       18a3eea6-c6a7-4c0d-bb76-670e72b3a151
:END:

#+begin_src emacs-lisp
(leaf edit-indirect
  :straight t)
#+end_src

* LaTeX Mode
:PROPERTIES:
:ID:       D8E085BF-A7E1-48F4-B7F1-BD3B0F942A7F
:END:

#+begin_src emacs-lisp

(leaf *latex
  :when window-system
  :config
  (leaf auctex
    :straight t
    :custom ((TeX-master . nil)
             (TeX-auto-save . t)
             (TeX-parse-self . t)
             (TeX-source-correlate-method . 'synctex)
             (TeX-source-correlate-start-server . t)
             (TeX-source-correlate-mode . t)
             (TeX-PDF-mode . t))

    :config
    (defun my/latex-mode-hook nil
      (visual-fill-column-mode t)
      (let*
          ((latexmk-cmd "latexmk -synctex=1 -interaction=nonstopmode -pv -f ")
           (ja-compile-cmd (concat latexmk-cmd "%s.tex"))
           (en-compile-cmd (concat latexmk-cmd "-e $bibtex=q/bibtex/ -pdf %s.tex"))
           (displayline-cmd
            (if (eq 'darwin system-type)
                "/Applications/Skim.app/Contents/SharedSupport/displayline %n %s.pdf %b"
              "okular --unique %o#src:%n%b")))
        (setq TeX-command-list
              `(("Clean" "TeX-clean" TeX-run-function nil t
                 :help "Delete generated intermediate files")
                ("Clean All" "(TeX-clean t)" TeX-run-function nil t
                 :help "Delete generated intermediate and output files")
                ("ja-uptex" ,ja-compile-cmd TeX-run-command t nil
                 :help "Japanese compile with uptex")
                ("en-pdflatex" ,en-compile-cmd TeX-run-command t nil
                 :help "English compile with pdflatex")
                ("PDF view" "open %s.pdf" TeX-run-command t nil
                 :help "View in PDF")
                ("Displayline" ,displayline-cmd TeX-run-command t nil
                 :help "Show selected line in PDF")))))
    (add-hook 'LaTeX-mode-hook  #'my/latex-mode-hook))

  (leaf latex-extra
    :doc "Adds several useful functionalities to LaTeX-mode."
    :url "http://github.com/Malabarba/latex-extra"
    :straight t
    :hook (LaTeX-mode-hook . latex-extra-mode)
    :bind (:latex-extra-mode-map
           ("C-M-f" . forward-paragraph)
           ("C-M-b" . backward-paragraph)))

  (leaf reftex
    :doc "Built-in function"
    :hook (LaTeX-mode-hook . reftex-mode)
    :bind (:reftex-mode-map
           ("C-c r" . reftex-reference)
           ("C-c l" . reftex-label)
           ("C-c c" . reftex-citation))
    :custom
    ((reftex-ref-style-default-list . '("Cleveref"))
     (reftex-cite-format . 'natbib))))

#+end_src

* Applications
** Competitive Programming with oj - Online Judge
:PROPERTIES:
:ID:       D816F044-D812-4957-85E6-4288FB4A8A6B
:END:

#+begin_src emacs-lisp
(leaf oj
  :when window-system
  :doc "Competitive programming tools client for AtCoder, Codeforces"
  :req "emacs-26.1" "quickrun-2.2"
  :url "https://github.com/conao3/oj.el"
  :straight t
  :commands oj-prepare oj-test oj-submit
  :custom ((oj-default-online-judge . 'atcoder)
           (oj-compiler-python . "cpython")
           (oj-home-dir . "~/drive/work/coder/AtCoder")
           (oj-submit-args quote
                           ("-y" "--wait=0"))))
#+end_src


** Elfeed
:PROPERTIES:
:ID:       66D649D3-84C7-44D7-8F23-E549647FF0CE
:END:

For a complete documentation visit the official elfeed page: https://github.com/skeeto/elfeed

Running the interactive function elfeed will pop up the *elfeed-search* buffer, which will display feed items.

+ =g=: refresh view of the feed listing
+ =G=: fetch feed updates from the servers
+ =s=: update the search filter (see tags)
+ =c=: clear the search filter

From the search buffer there are a number of ways to interact with entries. Entries are selected by placing the point over an entry. Multiple entries are selected at once by using an active region.

+ =RET=: view selected entry in a buffer
+ =b=: open selected entries in your browser (browse-url)
+ =y=: copy selected entries URL to the clipboard
+ =r=: mark selected entries as read
+ =u=: mark selected entries as unread
+ =+=: add a specific tag to selected entries
+ =-=: remove a specific tag from selected entries


#+begin_src emacs-lisp
(leaf elfeed
  :when window-system
  :straight t
  :commands elfeed
  :advice (:after elfeed (lambda nil (visual-line-mode -1)))
  :custom
  ((elfeed-search-filter . "@2-days-ago +unread")
   (elfeed-search-title-max-width . 80)
   (elfeed-search-title-min-width . 80)
   (elfeed-feeds
    quote
    (;; programming
     ("https://news.ycombinator.com/rss" Hacker)
     ("https://www.reddit.com/r/programming.rss" Programming)
     ("https://www.reddit.com/r/learnprogramming.rss" LearnProgramming)
     ("https://www.reddit.com/r/emacs.rss" Emacs)
     ("https://www.reddit.com/r/planetemacs.rss" PlanetEmacs)
     ("https://www.reddit.com/r/orgmode.rss" Org-mode)

     ;; programming languages
     ("https://www.reddit.com/r/python.rss" Python)

     ;; Apple
     ("https://www.reddit.com/r/apple.rss" Apple)
     ("https://www.reddit.com/r/mac.rss" Mac)
     ("https://www.reddit.com/r/AppleWatch.rss" AppleWatch)))))
#+end_src



** Mail
:PROPERTIES:
:ID:       708C16FF-B967-4E17-8846-C73B711FC9F5
:END:

*** General Settings
:PROPERTIES:
:ID:       cb56211c-1c97-4c1a-95d4-14f9d61bdd62
:END:

#+begin_src emacs-lisp
(leaf mail-general
  :disabled t
  :require t
  :load-path "~/src/github.com/naoking158/envs/config-mail/")
#+end_src

** Notmuch
:PROPERTIES:
:ID:       82ca56e2-cd3d-40f9-9a9c-a8ea873507bb
:END:

Manual is [[https://notmuchmail.org/emacstips/][here]]

#+begin_src emacs-lisp
;;; Notmuch (mail indexer and mail user agent (MUA))
;; I install notmuch from the distro's repos because the CLI program is
;; not dependent on Emacs.  Though the package also includes notmuch.el
;; which is what we use here (they are maintained by the same people).
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/")
(leaf notmuch
  ;; :straight t
  :commands notmuch notmuch-hello
  :config
  (load-file "~/src/github.com/naoking158/envs/config-mail/config-notmuch.el")

;;; General UI
  (setq notmuch-show-logo nil)
  (setq notmuch-column-control t)
  (setq notmuch-hello-auto-refresh t)
  (setq notmuch-hello-recent-searches-max 50)
  (setq notmuch-hello-thousands-separator "")
  (setq notmuch-show-all-tags-list nil)

;;; Search
  (setq notmuch-search-oldest-first nil)
  (setq notmuch-search-result-format
        '(("date" . "%12s  ")
          ("count" . "%-7s  ")
          ("authors" . "%-20s  ")
          ("subject" . "%-80s  ")
          ("tags" . "(%s)")))
  (setq notmuch-tree-result-format
        '(("date" . "%12s  ")
          ("authors" . "%-20s  ")
          ((("tree" . "%s")
            ("subject" . "%s"))
           . " %-80s  ")
          ("tags" . "(%s)")))
  (setq notmuch-search-line-faces
        '(("unread" . notmuch-search-unread-face)
          ("flag" . notmuch-search-flagged-face)))
  (setq notmuch-show-empty-saved-searches t)

;;; Tags
  (setq notmuch-archive-tags '("-inbox" "-del" "-todo" "+archived"))
  (setq notmuch-message-replied-tags '("+replied"))
  (setq notmuch-message-forwarded-tags '("+forwarded"))
  (setq notmuch-show-mark-read-tags '("-unread"))
  (setq notmuch-draft-tags '("+draft"))
  (setq notmuch-draft-folder "drafts")
  (setq notmuch-draft-save-plaintext 'ask)
  (setq notmuch-tag-formats
        '(("unread" (propertize tag 'face 'notmuch-tag-unread))
          ("flag" (propertize tag 'face 'notmuch-tag-flagged))))
  (setq notmuch-tag-deleted-formats
        '(("unread" (notmuch-apply-face bare-tag `notmuch-tag-deleted))
          (".*" (notmuch-apply-face tag `notmuch-tag-deleted))))

;;; Email composition
  (setq notmuch-mua-compose-in 'current-window)
  (setq notmuch-mua-hidden-headers nil) ; TODO 2021-05-12: Review hidden headers
  ;; (setq notmuch-address-command nil)    ; FIXME 2021-05-13: Make it work with EBDB
  (setq notmuch-address-use-company nil)
  (setq notmuch-address-internal-completion '(received nil))
  (setq notmuch-always-prompt-for-sender t)
  (setq notmuch-mua-cite-function 'message-cite-original-without-signature)
  (setq notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never)
  (setq notmuch-mua-user-agent-function #'notmuch-mua-user-agent-full)
  (setq notmuch-maildir-use-notmuch-insert t)
  (setq notmuch-crypto-process-mime t)
  (setq notmuch-crypto-get-keys-asynchronously t)

;;; Reading messages
  (setq notmuch-show-relative-dates t)
  (setq notmuch-show-all-multipart/alternative-parts nil)
  (setq notmuch-show-indent-messages-width 0)
  (setq notmuch-show-indent-multipart nil)
  (setq notmuch-show-part-button-default-action 'notmuch-show-save-part)
  (setq notmuch-show-text/html-blocked-images ".") ; block everything
  (setq notmuch-wash-citation-lines-prefix 6)
  (setq notmuch-wash-citation-lines-suffix 6)
  (setq notmuch-wash-wrap-lines-length 100)
  (setq notmuch-unthreaded-show-out nil)
  (setq notmuch-message-headers '("To" "Cc" "Subject" "Date"))
  (setq notmuch-message-headers-visible t)

;;; Hooks and key bindings
  (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)
  (remove-hook 'notmuch-show-hook #'notmuch-show-turn-on-visual-line-mode)
  (add-hook 'notmuch-show-hook (lambda () (setq-local header-line-format nil)))

  (leaf *notmuch-config
    :leaf-defer nil
    :advice
    (:after notmuch-show-mode meow-insert-mode)
    (:after notmuch-tree-mode meow-insert-mode)
    (:after notmuch-hello-mode meow-insert-mode)
    (:after notmuch-search-mode meow-insert-mode)
    (:after notmuch-message-mode meow-insert-mode)

    :hook (notmuch-mua-send-hook . notmuch-mua-attachment-check)
    :bind (:notmuch-search-mode-map
           :package notmuch
           ("." . nil)
           ("." . notmuch-tag-jump))
    :config
    ;; (add-to-list 'corfu-excluded-modes 'notmuch-message-mode)
    ;; (add-to-list 'corfu-excluded-modes 'org-msg-edit-mode)

    (setq mark-complete-tags '("+archived" "-inbox" "-todo" "-unread")
          mark-delete-tags '("+del" "-inbox" "-archived" "-unread")
          mark-flag-tags '("+flag" "-unread")
          mark-spam-tags '("+spam" "+del" "-inbox" "-unread")
          mark-todo-tags '("+todo" "-unread" "-inbox"))

    (setq notmuch-tagging-keys
          `((,(kbd "a") notmuch-archive-tags "Archive (remove from inbox)")
            (,(kbd "c") mark-complete-tags "Complete and archive")
            (,(kbd "d") mark-delete-tags "Mark for deletion")
            (,(kbd "f") mark-flag-tags "Flag as important")
            (,(kbd "s") mark-spam-tags "Mark as spam")
            (,(kbd "t") mark-todo-tags "To-do")
            (,(kbd "r") ("-unread") "Mark as read")
            (,(kbd "u") ("+unread") "Mark as unread")))
    )
  )
#+end_src

*** Notmuch-transient
:PROPERTIES:
:ID:       08871979-510f-4ab6-bbe5-d11bedfe7c9e
:END:

#+begin_src emacs-lisp
(leaf notmuch-transient
  :straight t
  :after notmuch
  :bind
  ((:notmuch-search-mode-map :package notmuch
                             ("=" . nil)
                             ("=" . notmuch-search-mode-transient))
   (:notmuch-tree-mode-map :package notmuch
                           ("=" . nil)
                           ("=" . notmuch-tree-mode-transient))
   (:notmuch-hello-mode-map :package notmuch
                            ("=" . nil)
                            ("=" . notmuch-hello-mode-transient))
   (:notmuch-show-mode-map :package notmuch
                           ("=" . nil)
                           ("=" . notmuch-show-mode-transient))))
#+end_src

*** ol-notmuch
:PROPERTIES:
:ID:       85a901ef-5f0f-4efa-ae0a-ead7a6731e3b
:END:

#+begin_src emacs-lisp
(leaf ol-notmuch
  :straight t
  :after notmuch)
#+end_src

*** Mu4e
**** Config
:PROPERTIES:
:ID:       44f695dc-d668-4345-b105-4ab273f1a501
:END:

#+begin_src emacs-lisp
(leaf *config-mu4e
  :disabled t
  :config
  (load-file "~/src/github.com/naoking158/envs/config-mail/config-mu4e.el"))
#+end_src

** Emacs Application Framework
:PROPERTIES:
:ID:       24FB1875-D6A4-4609-9485-FAAB24E07AA6
:END:

#+begin_src emacs-lisp

(leaf eaf
  :disabled t
  :when (memq window-system '(x pgtk))
  :load-path "~/src/github.com/emacs-eaf/emacs-application-framework/"
  :require eaf
  :commands
  (eaf-search-it eaf-open eaf-open-browser eaf-open-browser-with-history eaf-open-pdf-from-history)
  :custom
  ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  (;; (eaf-python-command . "/usr/bin/python")
   (eaf-browser-continue-where-left-off . t)
   (eaf-browser-enable-adblocker . t)
   (browse-url-browser-function . 'eaf-open-browser))
  :config
  ;; run (M-x eaf-install-and-update) at first time
  (require 'eaf-browser)
  (require 'eaf-pdf-viewer)
  (add-to-list 'eaf-wm-focus-fix-wms "wlroots wm")
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  ;; (defalias 'browse-web #'eaf-open-browser)
  (eaf-bind-key nil "M-q" eaf-browser-keybinding)
  )

#+end_src

* Server Mode
:PROPERTIES:
:ID:       829CCBA5-3D95-42AE-8D68-4AACC53C2DF8
:END:

#+begin_src emacs-lisp
(leaf server
  :doc "Lisp code for GNU Emacs running as server process"
  :tag "builtin"
  :require t
  :bind ("C-x C-c" . server-edit)
  :hook (emacs-startup-hook . server-start))
#+end_src

* Trial Packages
** Web Browser with emacs-w3m
:PROPERTIES:
:ID:       9A644B4B-58DA-42CC-9B82-A891A204FA05
:END:

[[https://github.com/emacs-w3m/emacs-w3m][Emacs-w3m]] is an Emacs interface to w3m.

While browsing, remember the following:

- TAB to jump from link to link.
- RETURN to follow a link
- SPACE to move down the page
- b to move up the page
- B to move back in the history
- M to open the URL in Firefox
- I to open the image if it didn’t show up correctly
- c to copy the URL of the current page in the kill ring.
- u to copy the URL of the link in the kill ring.
- a to bookmark this page
- v to look at the bookmarks
- s to look through the page history for this session.

#+begin_src emacs-lisp :tangle no
(leaf ace-link
  :straight t
  :config (ace-link-setup-default))

(leaf w3m
  :straight t ace-link
  :require t
  :init
  ;; (setq browse-url-browser-function 'w3m-browse-url)
  (setq w3m-use-cookies t)
  :hook (;; clean up the w3m buffers:
         (w3m-display-functions-hook . w3m-hide-stuff)
         (w3m-mode-hook . ace-link-mode))
  :bind (("C-c w w" . w3m)
         ("C-c w o" . browse-url-at-point)
         ("C-c w s" . w3m-search)
         (w3m-mode-map
          ("q" . quit-window)
          ("&" . w3m-view-url-with-external-browser)))
  ;; :config
  ;; Web Page Cleanup

  ;; Navigating some sites in a text browser is a bit painful, but we could have some functions that either move the cursor passed the header to the start of the content, or actually remove some of the content.

  ;; Google Search
  ;; Don’t need to actually remove stuff when search in Google, as I really just need to jump ahead and skip the header:
  ;; (defun w3m-skip-in-google ()
  ;;   "For a Google Search, skip to the first result."
  ;;   (beginning-of-buffer)
  ;;   (search-forward-regexp "[0-9, ]+ results")
  ;;   (forward-line 2)
  ;;   (recenter-top-bottom 0))

  ;; Stack Overflow
  ;; Without a clear enough label, searching for the start of content will always be fragile. We’ll look for the start of the first column.

  ;; Stack Overflow has a lot of text that isn’t helpful to someone in a text-based browser, so I would like to remove the voting and other parts. Not sure how to do it, since the columns are of variable width.
  ;; (defun w3m-skip-in-stackoverflow ()
  ;;   (beginning-of-buffer)
  ;;   (search-forward-regexp "^   ")
  ;;   (forward-line -2)
  ;;   (recenter-top-bottom 0))

  ;; Web Site Dispatch Function
  ;; Add a hook to the w3m-display-functions to match the URL to see which function we need to call:
  ;; (defun w3m-hide-stuff (url)
  ;;   "Call screen cleaning functions for the W3M based on the URL."
  ;;   (interactive)
  ;;   (cond ((string-match "google\.com/search" url) (w3m-skip-in-google))
  ;;         ((string-match "clojuredocs.org" url) (w3m-skip-in-clojuredocs))
  ;;         ((string-match "stackoverflow.com" url) (w3m-skip-in-stackoverflow))
  ;;         ))
  )
#+end_src

#+RESULTS:
: w3m


** Enhance xwidget webkit browser
:PROPERTIES:
:ID:       00E1AB83-81A1-4A8E-A58E-BEB657E8EDAF
:END:

#+begin_src emacs-lisp
(leaf xwwp
  :disabled t
  :when (or (<= emacs-major-version 27)
            (memq window-system '(ns darwin)))
  :straight t
  :custom (browse-url-browser-function . 'xwidget-webkit-browse-url)
  :bind (("C-c s" . xwwp)
         (xwidget-webkit-mode-map
          ("v" . xwwp-follow-link)
          ([remap kill-ring-save] . xwidget-webkit-copy-selection-as-kill)
          ([remap xwidget-webkit-browse-url] . xwwp)))
  :advice (:override xwwp-browse-url-other-window
                     my/xwwp-browse-url-other-window)
  :preface
  (defun my/xwwp-browse-url-other-window (url &optional new-session)
    "Ask xwidget-webkit to browse URL.
NEW-SESSION specifies whether to create a new xwidget-webkit session.
Interactively, URL defaults to the string looking like a url around point."
    (interactive (progn
                   (require 'browse-url)
                   (browse-url-interactive-arg "xwidget-webkit URL: "
                                               ;;(xwidget-webkit-current-url)
                                               )))
    (or (featurep 'xwidget-internal)
        (user-error "Your Emacs was not compiled with xwidgets support"))
    (when (stringp url)
      (if new-session
          (xwidget-webkit-new-session url)
        (progn (xwidget-webkit-goto-url url)
               (switch-to-buffer (xwidget-buffer
                                  (xwidget-webkit-current-session))))))))

(leaf webkit
  :disabled t
  :when (and (eq 28 emacs-major-version)
             (memq window-system '(x pgtk)))
  :load-path "~/.emacs.d/elisp/emacs-webkit/"
  :require t webkit-ace webkit-dark
  ;; :init
  ;; ;; This must be set before webkit.el is loaded so certain hooks aren't installed
  ;; (setq webkit-own-window t)
  :bind (("C-c s" . webkit))
  :config
  ;; If you don't care so much about privacy and want to give your data to google
  (setq webkit-search-prefix "https://google.com/search?q=")

  ;; Specify a different set of characters use in the link hints
  ;; For example the following are more convienent if you use dvorak
  (setq webkit-ace-chars "asdfjkl;")

  ;; If you want history saved in a different place or
  ;; Set to `nil' to if you don't want history saved to file (will stay in memory)
  (setq webkit-history-file
        (expand-file-name "webkit-history" no-littering-etc-directory))

  ;; If you want cookies saved in a different place or
  ;; Set to `nil' to if you don't want cookies saved
  (setq webkit-cookie-file
        (expand-file-name "cookies" no-littering-etc-directory))

  ;; Set webkit as the default browse-url browser
  ;; (setq browse-url-browser-function 'webkit-browse-url)
  ;; (setq browse-url-browser-function 'browse-url-default-browser)

  ;; Force webkit to always open a new session instead of reusing a current one
  (setq webkit-browse-url-force-new t)

  ;; Globally disable javascript
  ;; (add-hook 'webkit-new-hook #'webkit-enable-javascript)

  ;; Override the "loading:" mode line indicator with an icon from `all-the-icons.el'
  ;; You could also use a unicode icon like ↺
  (defun webkit--display-progress (progress)
    (setq webkit--progress-formatted
          (if (equal progress 100.0)
              ""
            (format "%s%.0f%%  " (all-the-icons-faicon "spinner") progress)))
    (force-mode-line-update))

  ;; Set action to be taken on a download request. Predefined actions are
  ;; `webkit-download-default', `webkit-download-save', and `webkit-download-open'
  ;; where the save function saves to the download directory, the open function
  ;; opens in a temp buffer and the default function interactively prompts.
  (setq webkit-download-action-alist '(("\\.pdf\\'" . webkit-download-open)
                                       ("\\.png\\'" . webkit-download-save)
                                       (".*" . webkit-download-default)))

  ;; Globally use a proxy
  ;; (add-hook 'webkit-new-hook (lambda () (webkit-set-proxy "socks://localhost:8000")))

  ;; Globally use the simple dark mode
  (setq webkit-dark-mode t))
#+end_src

** PDF Tools
:PROPERTIES:
:ID:       F8397827-76ED-41E2-9857-992B2BC4EF1D
:END:

#+begin_src emacs-lisp
(leaf pdf-tools
  :straight t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :bind (:pdf-view-mode-map
         ("j" . pdf-view-next-line-or-next-page)
         ("k" . pdf-view-previous-line-or-previous-page)
         ("h" . image-backward-hscroll)
         ("l" . image-forward-hscroll)
         ("/" . pdf-occur))
  :hook ((TeX-after-compilation-finished-functions . TeX-revert-document-buffer)
         (pdf-view-mode-hook . (lambda () (set-buffer-multibyte t))))
  :custom (pdf-view-display-size . 'fit-width)
  :config
  (pdf-tools-install :no-query)
  (leaf pdf-annot
    :require t
    :after pdf-tools
    :custom `(pdf-annot-minor-mode-map-prefix . ,(kbd "a"))
    :bind
    (:pdf-annot-minor-mode-map
     ("d" . pdf-annot-delete)
     ("h" . pdf-annot-add-highlight-markup-annotation)
     ("s" . pdf-annot-add-strikeout-markup-annotation)
     ("u" . pdf-annot-add-underline-markup-annotation))))
#+end_src

** Apple Script Mode
:PROPERTIES:
:ID:       1ACA04C2-1F7F-44C5-A32B-CE0283DCA6DB
:END:
#+begin_src emacs-lisp
(leaf applescript-mode :straight t)
#+end_src

** Emacs Jupyter
:PROPERTIES:
:ID:       4f42d25d-a7e3-4a7b-9a39-975f1d79631c
:END:


TODO: =ansi-color--find-face= is renamed to =ansi-color--face-vec-face= in emacs-29

Disabling native compilation is for avoid the issue: https://github.com/nnicandro/emacs-jupyter/issues/297#issuecomment-778924175


To enable support for Jupyter based source code blocks, add jupyter to org-babel-load-languages. Ensure the jupyter entry is added last since loading ob-jupyter depends on the value of variables such as org-src-lang-modes and org-babel-tangle-lang-exts.

#+begin_src emacs-lisp
(leaf jupyter
  :disabled t
  :straight jupyter websocket
  :after org
  :config
  (leaf ob-jupyter
    :require t
    :preface (dolist (lang '(python jupyter))
               (add-to-list 'org-babel-load-languages
                            (cons lang t) t))
    :advice ((:before org-babel-execute:jupyter (lambda (&rest args)
                                                  (require 'zmq)))
             (:before org-babel-expand-body:jupyter (lambda (&rest args)
                                                      (require 'zmq))))
    :config
    (define-key jupyter-org-interaction-mode-map
                [remap jupyter-org-hydra/body] nil)
    (define-key jupyter-org-interaction-mode-map
                (kbd "C-c C-.") #'jupyter-org-hydra/body)))
#+end_src

*** Enable lsp in org-code-block
:PROPERTIES:
:ID:       725ED664-EA71-4344-A509-458228B9A6CD
:END:

- https://github.com/emacs-lsp/lsp-mode/issues/2842#issuecomment-870807018
- https://github.com/emacs-lsp/lsp-mode/issues/655#issuecomment-592331844

- =:file filename= or =:tangle filename= のどちらかを書く
- =:tangle= の場合は下記の関数を用意することで，code-block に入ったときにバッファ名が filename になる
- バッファ全体に適用するならこう
  =#+PROPERTY: header-args:jupyter-python :file tmp.py=

#+begin_src emacs-lisp
(leaf org-babel
  :after org python-mode
  :config
  (defun org-babel-edit-prep:jupyter-python (babel-info)
    (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
    (my/python-basic-config))
  ;; (defun org-babel-edit-prep:python (babel-info)
  ;;   (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  ;;   (my/python-basic-config))
  )
#+end_src


*** Preparation

1. Install =jupyterlab= and =ipykernel= to both of base and Virtual env

2. Create kernel in virtual env
   #+begin_src shell
   conda activate ENVNAME
   ipython install kernel --user --name=ENVNAME

   # or

   python -m ipykernel install --user --name=ENVNAME
   #+end_src


*** How to use it?

** Search in external web browser
:PROPERTIES:
:ID:       AAFDC789-E681-4214-B095-578ACAA5F843
:END:

#+begin_src emacs-lisp
(leaf sie-brow
  :disabled t
  :doc "Sie-Brow; Search in external browser with keywords
          - at point with prefix `C-u',
          - in selected region,
          - killed latest, or
          - input by user."
  :bind (("C-c s" . sie-brow/search-in-google)
         ("C-c p" . sie-brow/search-in-google-scholar))
  :custom (browse-url-browser-function . 'browse-url-default-browser)
  :preface
  (defgroup sie-brow nil
    "Search in external browser with keywords."
    :prefix "sie-brow/"
    :group 'sie-brow)

  (defcustom sie-brow/prefix-for-google-search "https://www.google.com/search"
    "Prefix for google search."
    :type 'string
    :group 'sie-brow)

  (defcustom sie-brow/prefix-for-google-scholar "https://scholar.google.com/scholar"
    "Prefix for google scholar."
    :type 'string
    :group 'sie-brow)

  (defcustom sie-brow/url-suffix "&ie=UTF-8"
    "Suffix of the URL."
    :type 'string
    :group 'sie-brow)

  (defun sie-brow/keyword-suitable-for-url-format (&optional at-point)
    "Return a search keyword suitable for the URL format."
    (let* ((default-keyword (cond
                             (at-point (thing-at-point 'symbol))
                             ((use-region-p) (buffer-substring-no-properties
                                              (mark) (point)))
                             (t (if kill-ring
                                    (substring-no-properties (car kill-ring))
                                  nil))))
           (keywords (read-from-minibuffer (if default-keyword
                                               (format "Search keywords (%s): "
                                                       default-keyword)
                                             "Search keywords: "))))
      (replace-regexp-in-string "[ \n\t\r\f ]"
                                "+"
                                (if (length> keywords 0)
                                    keywords
                                  default-keyword))))

  (defun sie-brow/search-in-external-browser (prefix &optional at-point)
    "Search in external browser with keywords
          - at point with prefix `C-u',
          - in selected region,
          - that are latest killed words, or
          - input by user."
    (let* ((search-keyword (sie-brow/keyword-suitable-for-url-format at-point)))
      (browse-url (concat prefix
                          "?q=" search-keyword
                          sie-brow/url-suffix))))

  (defun sie-brow/search-in-google (&optional at-point)
    "Search in Google."
    (interactive "P")
    (sie-brow/search-in-external-browser sie-brow/prefix-for-google-search at-point))

  (defun sie-brow/search-in-google-scholar (&optional at-point)
    "Search in Google Scholar."
    (interactive "P")
    (sie-brow/search-in-external-browser sie-brow/prefix-for-google-scholar at-point)))
#+end_src


** Browse at remote
:PROPERTIES:
:ID:       D593E6DF-F5FF-48BB-9137-805205B140BF
:END:

#+begin_src emacs-lisp

(leaf browse-at-remote
  :straight t
  :commands browse-at-remote-get-url
  :custom (browse-at-remote-prefer-symbolic . nil)
  :bind ("M-g r" . browse-at-remote))

#+end_src

** Org-inline-anim
:PROPERTIES:
:ID:       b9e7ff28-7e6d-4129-9db8-8dfe87688c7e
:END:

#+begin_src emacs-lisp

(leaf org-inline-anim
  :straight t
  :hook (org-mode-hook . org-inline-anim-mode))

#+end_src

** Save frame and window configs with Burly
:PROPERTIES:
:ID:       d4e21974-5042-4145-a6c1-ab00cb7096bc
:END:

#+begin_src emacs-lisp

(leaf burly
  :straight t
  :bind* (("C-x C-b w" . burly-bookmark-windows)
          ("C-x C-b f" . burly-bookmark-frames)))

#+end_src


** CSV-mode
:PROPERTIES:
:ID:       dfb5287a-e3bf-473d-bf98-850942e1f414
:END:

#+begin_src emacs-lisp
(leaf csv-mode :straight t)
#+end_src

** Markdown-preview-mode
:PROPERTIES:
:ID:       bf787c9b-9449-46b4-9e6b-d9dc7d3e16b6
:END:

#+begin_src emacs-lisp
(leaf markdown-preview-mode
  :straight t
  :defer-config
  (setq markdown-preview-stylesheets
        (list "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown-dark.min.css")
        ;; (list "http://thomasf.github.io/solarized-css/solarized-light.min.css")
        )

  (dolist (elm (list
                "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"))
    (add-to-list 'markdown-preview-javascript elm)))
#+end_src

** Mermaid-mode
:PROPERTIES:
:ID:       71c6f771-c208-4c7c-9521-f106418c015e
:END:

#+begin_src emacs-lisp

(leaf mermaid-mode
  :straight t
  :defer-config
  (setq mermaid-mode-map
        (let ((map mermaid-mode-map))
          (define-key map (kbd "C-c C-c") nil)
          (define-key map (kbd "C-c C-f") nil)
          (define-key map (kbd "C-c C-b") nil)
          (define-key map (kbd "C-c C-r") nil)
          (define-key map (kbd "C-c C-o") nil)
          (define-key map (kbd "C-c C-d") nil)
          (define-key map (kbd "C-c C-d c") 'mermaid-compile)
          (define-key map (kbd "C-c C-d c") 'mermaid-compile)
          (define-key map (kbd "C-c C-d f") 'mermaid-compile-file)
          (define-key map (kbd "C-c C-d b") 'mermaid-compile-buffer)
          (define-key map (kbd "C-c C-d r") 'mermaid-compile-region)
          (define-key map (kbd "C-c C-d o") 'mermaid-open-browser)
          (define-key map (kbd "C-c C-d d") 'mermaid-open-doc)
          map)))
#+end_src

** Editorconfig
:PROPERTIES:
:ID:       f118d959-269c-447e-962c-5707fd1f02a3
:END:

#+begin_src emacs-lisp
(leaf editorconfig
  :straight t
  :global-minor-mode editorconfig-mode)
#+end_src


** Format-all
:PROPERTIES:
:ID:       5460d222-04cb-4ebb-a9e8-4cbfff0a2f5f
:END:

#+begin_src emacs-lisp
(leaf format-all
  :straight t)
#+end_src

** Direnv
:PROPERTIES:
:ID:       0ce20a53-d842-4f89-9432-03608cabb1ac
:END:

#+begin_src emacs-lisp
(leaf direnv
  :straight t
  :hook (emacs-startup-hook . direnv-mode))
#+end_src

** Poetry
:PROPERTIES:
:ID:       03d13a45-8b16-4612-ae51-56484777265b
:END:

#+begin_src emacs-lisp
(leaf poetry
  :disabled t
  :straight t
  :hook (emacs-startup-hook . poetry-tracking-mode))
#+end_src

** Pyvenv
:PROPERTIES:
:ID:       6b33c1cd-a0da-41db-9b47-a823b56bdf45
:END:

#+begin_src emacs-lisp
(leaf pyvenv
  :straight (pyvenv
             :type git
             :host github
             :repo "jorgenschaefer/pyvenv"))
#+end_src

** OpenAPI Preview
:PROPERTIES:
:ID:       0be3b197-4eed-4bd2-908e-4f0a1295be7f
:END:

#+begin_src emacs-lisp
(leaf openapi-preview
  :straight (openapi-preview
             :type git
             :host github
             :repo "merrickluo/openapi-preview"))
#+end_src

** Svelte-mode
:PROPERTIES:
:ID:       a8772d45-8938-4ba4-8b90-28af88ce3a3d
:END:

#+begin_src emacs-lisp
(leaf svelte-mode
  :straight t)
#+end_src

** Ellama for Ollama communication
:PROPERTIES:
:ID:       4018d66f-e209-4175-b59a-630396e15e60
:END:

#+begin_src emacs-lisp
(leaf ellama
  :straight (ellama
             :type git
             :host github
             :repo "s-kostyaev/ellama")
  :init
  ;; setup key bindings
  (setopt ellama-keymap-prefix "C-c e")
  :custom ((ellama-language . "Japanese"))
  :config
  (require 'llm-ollama)
  (setopt ellama-provider
	        (make-llm-ollama
	         ;; this model should be pulled to use it
	         ;; value should be the same as you print in terminal during pull
	         :chat-model "llama3.1"
	         :embedding-model "llama3.1"))
  (setopt ellama-providers
		      '(
            ("git-commit-message" . (make-llm-ollama
                                     :chat-model "tavernari/git-commit-message"
                                     :embedding-model "tavernari/git-commit-message"))
            ("llama3.1" . (make-llm-ollama
                           :chat-model "llama3.1"
                           :embedding-model "llama3.1"))
            ("phi3" . (make-llm-ollama
                       :chat-model "phi3:14b"
                       :embedding-model "phi3:14b"))
            ))
  ;; Translation llm provider
  (setopt ellama-translation-provider (make-llm-ollama
                                       :chat-model "llama3.1"
                                       :embedding-model "llama3.1"))
  )
#+end_src

** PlantUML
:PROPERTIES:
:ID:       5080c682-07f6-4685-a943-7734ece65e3c
:END:

#+begin_src emacs-lisp
(leaf plantuml-mode
  :straight t
  :mode "\\.pu\\'"
  :custom ((plantuml-jar-path . "~/plantuml.jar")
           (plantuml-exec-mode . 'jar)
           (plantuml-indent-level . 4)))
#+end_src

** Reformatter
:PROPERTIES:
:ID:       31F3A879-B6F9-4186-B199-848BC36DFB02
:END:

#+begin_src emacs-lisp
(leaf reformatter
  :straight (reformatter
             :type git
             :host github
             :repo "purcell/emacs-reformatter"))
#+end_src

** One-tab-per-project

#+begin_src emacs-lisp
(leaf otpp
  :straight (otpp
             :type git
             :host github
             :repo "abougouffa/one-tab-per-project")
  :init
  ;; If you like to define some aliases for better user experience
  (defalias 'one-tab-per-project-mode 'otpp-mode)
  (defalias 'one-tab-per-project-override-mode 'otpp-override-mode)
  ;; Enable `otpp-mode` globally
  (otpp-mode 1)
  ;; If you want to advice the commands in `otpp-override-commands`
  ;; to be run in the current's tab (so, current project's) root directory
  (otpp-override-mode 1))
#+end_src

** prettier-rc

#+begin_src emacs-lisp
(leaf prettier-rc
  :straight t
  :hook ((web-mode-hook vue-mode-hook typescript-mode-hook js-mode-hook) . prettier-rc-mode)
  )
#+end_src

** lsp-proxy

#+begin_src emacs-lisp
(leaf lsp-proxy
  :straight (lsp-proxy
             :type git
             :host github
             :repo "jadestrong/lsp-proxy"
             :files ("lsp-proxy.el" "lsp-proxy")
             :pre-build (("cargo" "build" "--release") ("cp" "./target/release/lsp-proxy" "./")))
  :require t
  :hook (go-mode-hook
         go-ts-mode-hook
         vue-ts-mode-hook
         web-mode-hook
         typescript-mode-hook
         js-mode-hook
         emacs-lisp-mode-hook)
  :custom `((lsp-proxy-user-languages-config . ,(expand-file-name "~/.emacs.d/etc/lsp-proxy/languages.toml")))
  :bind ((:lsp-proxy-mode-map
          :package lsp-proxy
          ("M-." . lsp-proxy-find-definition)
          ("M-," . xref-go-back)
          ("C-c C-d" . lsp-proxy-describe-thing-at-point)
          ("C-c C-r" . lsp-proxy-find-references)
          ("C-c l i" . lsp-proxy-find-implementations)
          ("C-c l r" . lsp-proxy-rename)
          ("C-c l c" . lsp-proxy-execute-command)
          ("C-c l s" . lsp-proxy-signature-activate)))
  )
#+end_src

** copilot

#+begin_src emacs-lisp
(leaf copilot
  :straight (copilot
             :host github
             :repo "copilot-emacs/copilot.el"
             :files ("*.el"))
  :hook (prog-mode-hook . copilot-mode)
  :bind (:copilot-mode-map
         ("C-<return>" . copilot-accept-completion)
         ("C-S-<return>" . copilot-accept-completion-by-line))
  :hydra (hydra-copilot
          (global-map "C-c c")
          "copilot"
          ("c" copilot-complete "complete")
          ("n" copilot-next-completion "next")
          ("p" copilot-previous-completion "previous"))
  :custom ((copilot-indent-offset-warning-disable . t)
           (copilot-max-char . -1))
  :config
  (add-to-list 'copilot-major-mode-alist '("emacs-lisp" . "elisp"))
  (add-to-list 'copilot-major-mode-alist '("go" . "go"))
  (add-to-list 'copilot-major-mode-alist '("go-ts" . "go"))
  )
#+end_src

* Footer
:PROPERTIES:
:ID:       B2B50080-95ED-4DEC-B99E-B120D1A08233
:END:

#+begin_src emacs-lisp
(provide 'init)
#+end_src
