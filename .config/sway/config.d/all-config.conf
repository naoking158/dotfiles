# # Logo key. Use Mod1 for Alt and Mod4 for Super.
# set $mod Mod4

# # Script directory
set $scripts $HOME/.config/sway/scripts

# Direction keys
set $left Left
set $down Down
set $up Up
set $right Right

# # Add --to-code to bindsym, support for non-latin layouts
# set $bindsym bindsym --to-code

# # For user's convenience, the same for unbindsym
# set $unbindsym unbindsym --to-code

# # follow windows after moving them
# set $focus_after_move true

# ## Action // Kill focused window ##
# $bindsym $mod+Shift+q kill

# # Drag floating windows by holding down $mod and left mouse button.
# # Resize them with right mouse button + $mod.
# # Despite the name, also works for non-floating windows.
# # Change normal to inverse to use left mouse button for resizing and right
# # mouse button for dragging.
# floating_modifier $mod normal

# ## Action // Reload Sway Configuration ##
# $bindsym $mod+Shift+c reload


# # sway does not set DISPLAY/WAYLAND_DISPLAY in the systemd user environment
# # See FS#63021
# # Adapted from xorg's 50-systemd-user.sh, which achieves a similar goal.
# exec systemctl --user import-environment DISPLAY WAYLAND_DISPLAY SWAYSOCK XDG_CURRENT_DESKTOP
# exec hash dbus-update-activation-environment 2>/dev/null && \
#      dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK XDG_CURRENT_DESKTOP

set $colorscheme $HOME/.config/sway/themes/base16-sway/themes/base16-nord.config
include $colorscheme

# # some global theme specific variables
# set $gtk-theme Matcha-dark-sea
# set $icon-theme Papirus-Dark-Maia
# set $cursor-theme xcursor-breeze
# set $gui-font RobotoMono Nerd Font 14
# set $term-font RobotoMono Nerd Font Mono 14
# set $kvantum-theme Matchama-Dark

# # Basic color configuration using the Base16 variables for windows and borders.
# # Property Name         Border  BG      Text    Indicator Child Border
# client.focused          $base05 $base0D $base00 $base0D $base0D
# client.focused_inactive $base01 $base01 $base05 $base03 $base01
# client.unfocused        $base01 $base00 $base05 $base01 $base01
# client.urgent           $base08 $base08 $base00 $base08 $base08
# client.placeholder      $base00 $base00 $base05 $base00 $base00
# client.background       $base07

# set $background-color $base03
# set $text-color       $base05
# set $selection-color  $base0D
# set $accent-color     $base0B

output DP-2 pos 0 1440 res 3840x1600
output HDMI-A-1 pos 200 0 res 3440x1440

### Input configuration
#
input * {
    repeat_delay 200
    repeat_rate 40
}

# ### Terminal
set $term alacritty
# set $term foot
# set $term_float footclient -a floating_shell
# set $term_float_portrait footclient -a floating_shell_portrait

## Launch // Terminal ##
$unbindsym $mod+Return
$bindsym $mod+Return exec $term

# # help command
# set $help $scripts/help.sh --toggle

# ## generate help
# exec_always sed '/^.SH SHORTCUTS$/r'<($HOME/.config/sway/scripts/sbdp.py $HOME/.config/sway/config man) /usr/share/sway/templates/help.man > $HOME/.config/sway/help.man

# # calendar application
# set $calendar $term_float khal interactive

# set $mode_shutdown "\
# <span foreground='$base0A'></span>  \
# <span foreground='$base05'> \
# <span foreground='$base0A'>(<b>h</b>)</span>hibernate \
# <span foreground='$base0A'>(<b>l</b>)</span>lock \
# <span foreground='$base0A'>(<b>e</b>)</span>logout \
# <span foreground='$base0A'>(<b>r</b>)</span>reboot \
# <span foreground='$base0A'>(<b>u</b>)</span>suspend \
# <span foreground='$base0A'>(<b>s</b>)</span>shutdown \
# </span>"

# set $purge_cliphist [ $purge_cliphist_logout == 'true' ] && rm -f $HOME/.cache/cliphist/db || exit 0

# mode --pango_markup $mode_shutdown {
#     # lock
#     $bindsym l mode "default", exec $locking

#     # logout
#     $bindsym e exec $purge_cliphist; exec loginctl terminate-user $USER

#     # suspend
#     $bindsym u mode "default", exec systemctl suspend

#     # hibernate
#     $bindsym h mode "default", exec systemctl hibernate

#     # shutdown
#     $bindsym s exec $purge_cliphist; exec systemctl poweroff

#     # reboot
#     $bindsym r exec $purge_cliphist; exec systemctl reboot

#     # Return to default mode.
#     $bindsym Escape mode "default"
# }

## Launch // Exit Menu ##
# $bindsym $mod+Shift+e mode $mode_shutdown

# Background
set $background $HOME/.dotfiles/wallpapers/sea_and_mountain.jpg
output * bg $background fill

# # Onscreen bar
# set $onscreen_bar bash $scripts/wob.sh "$accent-colorFF" "$background-colorFF"

# # brightness control
# set $brightness_step bash -c 'echo $(( $(light -Mr) / 100 * 5 < 1 ? 1 : $(( $(light -Mr) / 100 * 5 )) ))'
# set $brightness_up light -r -A $($brightness_step) && $onscreen_bar $(light -G | cut -d'.' -f1)
# set $brightness_down light -r -U $($brightness_step) && $onscreen_bar $(light -G | cut -d'.' -f1)

# $bindsym --locked XF86MonBrightnessUp exec $brightness_up
# $bindsym --locked XF86MonBrightnessDown exec $brightness_down

# # audio control
# set $sink_volume pactl get-sink-volume @DEFAULT_SINK@ | grep '^Volume:' | cut -d / -f 2 | tr -d ' ' | sed 's/%//'
# set $source_volume pactl get-source-volume @DEFAULT_SOURCE@ | grep '^Volume:' | cut -d / -f 2 | tr -d ' ' | sed 's/%//'
# set $volume_down $onscreen_bar $(pactl set-sink-volume @DEFAULT_SINK@ -5% && $sink_volume)
# set $volume_up $onscreen_bar $(pactl set-sink-volume @DEFAULT_SINK@ +5% && $sink_volume)
# set $volume_mute $onscreen_bar $(pactl set-sink-mute @DEFAULT_SINK@ toggle && pactl get-sink-mute @DEFAULT_SINK@ | sed -En "/no/ s/.*/$($sink_volume)/p; /yes/ s/.*/0/p")
# set $mic_mute $onscreen_bar $(pactl set-source-mute @DEFAULT_SOURCE@ toggle && pactl get-source-mute @DEFAULT_SOURCE@ | sed -En "/no/ s/.*/$($source_volume)/p; /yes/ s/.*/0/p")

# $bindsym --locked XF86AudioRaiseVolume exec $volume_up
# $bindsym --locked XF86AudioLowerVolume exec $volume_down
# $bindsym --locked XF86AudioMute exec $volume_mute
# $bindsym XF86AudioMicMute exec $mic_mute

# $bindsym --locked XF86AudioPlay exec playerctl play-pause
# $bindsym XF86AudioNext exec playerctl next
# $bindsym XF86AudioPrev exec playerctl previous

# ### Lockscreen configuration
# set $locking swaylock --daemonize --color "$selection-color" --inside-color "$selection-color" --inside-clear-color "$text-color" --ring-color "$base02" --ring-clear-color "$base0B" --ring-ver-color "$base0F" --show-failed-attempts --fade-in 0.2 --grace 2 --effect-vignette 0.5:0.5 --effect-blur 7x5 --ignore-empty-password --screenshots --clock

# ###Notification daemon configuration
# set $notifications mako --font "$term-font" --text-color "$text-color" --border-color "$accent-color" --background-color "$background-color" --border-size 3 --width 400 --height 200 --padding 20 --margin 20 --default-timeout 15000

# #
# # Layout stuff:
# #
# ## Setting // Split windows horizontally ##
# $bindsym $mod+b splith
# ## Setting // Split windows vertically ##
# $bindsym $mod+v splitv

# ## Action // Switch to window stacking ##
# $bindsym $mod+s layout stacking
# ## Action // Switch to window tabbing ##
# $bindsym $mod+w layout tabbed
# ## Action // Toggle window splitting ##
# $bindsym $mod+e layout toggle split

# ## Action // Toggle fullscreen ##
# $bindsym $mod+f fullscreen

# ## Action // Toggle global fullscreen ##
# $bindsym $mod+Shift+f fullscreen global

# ## Action // Toggle floating ##
# $bindsym $mod+Shift+space floating toggle

# ## Navigation // Toggle focus between tiling and floating ##
# $bindsym $mod+space focus mode_toggle

# ## Navigation // Swap focus to the parent window ##
# $bindsym $mod+a focus parent

# ## Launch // Toggle Help ##
# $bindsym $mod+question exec $help

# default_border pixel 4
# hide_edge_borders smart

# #
# # Window resizer
# #
# set $mode_resize "<span foreground='$base0A'></span>  \
# <span foreground='$base05'><b>Resize</b></span> <span foreground='$base0A'>(<b>↑ ↓ ← →</b>)</span> \
# <span foreground='$base05'><b>Increase Gaps</b></span> <span foreground='$base0A'>(<b>+</b>)</span> \
# <span foreground='$base05'><b>Decrease Gaps</b></span> <span foreground='$base0A'>(<b>-</b>)</span>"

# mode --pango_markup $mode_resize {
#     # left will shrink the containers width
#     # right will grow the containers width
#     # up will shrink the containers height
#     # down will grow the containers height
#     $bindsym $left resize shrink width 10px
#     $bindsym $down resize grow height 10px
#     $bindsym $up resize shrink height 10px
#     $bindsym $right resize grow width 10px
#     $bindsym Shift+$left resize shrink width 20px
#     $bindsym Shift+$down resize grow height 20px
#     $bindsym Shift+$up resize shrink height 20px
#     $bindsym Shift+$right resize grow width 20px

#     ## Resize // Window Gaps // + - ##
#     $bindsym minus gaps inner current minus 5px
#     $bindsym plus gaps inner current plus 5px

#     # Return to default mode
#     $bindsym Return mode "default"
#     $bindsym Escape mode "default"
# }
# ## Launch // Resize Mode ##
# $bindsym $mod+r mode $mode_resize
# gaps inner 5px
# gaps outer 5px

# exec_always {
#   gsettings set org.gnome.desktop.interface gtk-theme "$gtk-theme"
#   gsettings set org.gnome.desktop.interface icon-theme "$icon-theme"
#   gsettings set org.gnome.desktop.interface cursor-theme "$cursor-theme"
#   gsettings set org.gnome.desktop.interface font-name "$gui-font"
# }

# #don't show gaps if there's only one window on the desktop
# smart_gaps on

# # set floating mode for specific applications
# for_window [instance="lxappearance"] floating enable
# for_window [app_id="pamac-manager"] floating enable
# for_window [app_id="blueberry.py"] floating enable
# for_window [app_id="firefox" title="^Library$"] floating enable, border pixel 1, sticky enable
# for_window [app_id="thunderbird" title=".*Reminder"] floating enable
# for_window [app_id="floating_shell_portrait"] floating enable, border pixel 1, sticky enable, resize set width 30 ppt height 40 ppt
# for_window [app_id="floating_shell"] floating enable, border pixel 1, sticky enable
# for_window [app_id="Manjaro.manjaro-settings-manager"] floating enable
# for_window [app_id="" title="Picture in picture"] floating enable, sticky enable
# for_window [app_id="" title="Picture-in-Picture"] floating enable, sticky enable
# for_window [app_id="xsensors"] floating enable
# for_window [title="Save File"] floating enable
# for_window [title="Firefox — Sharing Indicator"] floating enable
# for_window [app_id="" title=".* is sharing your screen."] floating enable
# for_window [title="^wlay$"] floating enable
# for_window [title="Fcitx Configuration"] floating enable
# for_window [title="1Password*$"] floating enable
# for_window [title="Dictionary Manager"] floating enable

# # inhibit idle
# for_window [app_id="microsoft teams - preview"] inhibit_idle fullscreen
# for_window [class=".*"] inhibit_idle fullscreen
# for_window [app_id=".*"] inhibit_idle fullscreen

# Move your focus around

# Unbind default keybind
$unbindsym $mod+h
$unbindsym $mod+j
$unbindsym $mod+k
$unbindsym $mod+l
$unbindsym $mod+Shift+h
$unbindsym $mod+Shift+j
$unbindsym $mod+Shift+k
$unbindsym $mod+Shift+l

# ## Navigation // Move focus // $mod + ↑ ↓ ← → ##
# $bindsym $mod+$left focus left
# $bindsym $mod+$down focus down
# $bindsym $mod+$up focus up
# $bindsym $mod+$right focus right

# ## Navigation // Move focused window // $mod + Shift + ↑ ↓ ← → ##
# $bindsym $mod+Shift+$left move left
# $bindsym $mod+Shift+$down move down
# $bindsym $mod+Shift+$up move up
# $bindsym $mod+Shift+$right move right

# #
# # Workspaces:
# #
# ## workspace names
# set $ws1 number 1
# set $ws2 number 2
# set $ws3 number 3
# set $ws4 number 4
# set $ws5 number 5
# set $ws6 number 6
# set $ws7 number 7
# set $ws8 number 8
# set $ws9 number 9
# set $ws10 number 10

# ## Navigation // Switch workspace // $mod + [number] ##
# $bindsym $mod+1 workspace $ws1
# $bindsym $mod+2 workspace $ws2
# $bindsym $mod+3 workspace $ws3
# $bindsym $mod+4 workspace $ws4
# $bindsym $mod+5 workspace $ws5
# $bindsym $mod+6 workspace $ws6
# $bindsym $mod+7 workspace $ws7
# $bindsym $mod+8 workspace $ws8
# $bindsym $mod+9 workspace $ws9
# $bindsym $mod+0 workspace $ws10

# set $focus_ws [ $focus_after_move == 'true' ] && swaymsg workspace

# ## Action // Move focused window to workspace // $mod + Shift + [number] ##
# $bindsym $mod+Shift+1 move container to workspace $ws1, exec $focus_ws $ws1
# $bindsym $mod+Shift+2 move container to workspace $ws2, exec $focus_ws $ws2
# $bindsym $mod+Shift+3 move container to workspace $ws3, exec $focus_ws $ws3
# $bindsym $mod+Shift+4 move container to workspace $ws4, exec $focus_ws $ws4
# $bindsym $mod+Shift+5 move container to workspace $ws5, exec $focus_ws $ws5
# $bindsym $mod+Shift+6 move container to workspace $ws6, exec $focus_ws $ws6
# $bindsym $mod+Shift+7 move container to workspace $ws7, exec $focus_ws $ws7
# $bindsym $mod+Shift+8 move container to workspace $ws8, exec $focus_ws $ws8
# $bindsym $mod+Shift+9 move container to workspace $ws9, exec $focus_ws $ws9
# $bindsym $mod+Shift+0 move container to workspace $ws10, exec $focus_ws $ws10

# #
# # Scratchpad:
# #
# # Sway has a "scratchpad", which is a bag of holding for windows.
# # You can send windows there and get them back later.

# ## Action // Move window to scratchpad ##
# $bindsym $mod+Shift+minus move scratchpad, exec "pkill -RTMIN+7 waybar"

# # If there are multiple scratchpad windows, this command cycles through them.
# ## Action // Toggle scratchpad ##
# $bindsym $mod+minus scratchpad show, exec "pkill -RTMIN+7 waybar"

# # rofi - Application launcher 
# set $menu rofi -show combi -combi-modi "drun,run" -terminal $term -ssh-command "{terminal} {ssh-client} {host} [-p {port}]" -run-shell-command "{terminal} {cmd}" -show-icons -font "$gui-font" -lines 10 -width 35 -theme-str $rofi_theme

# ## Launch // Launcher ##
# $bindsym $mod+d exec $menu

# # rofi theme
# set $rofi_theme "* {lightbg: $background-color; background: $background-color; lightfg: $accent-color; foreground: $text-color;}"

# # clipboard history
# set $clipboard cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to copy" -lines 10 -width 35 -theme-str $rofi_theme | cliphist decode | wl-copy
# set $clipboard-del cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to delete" -lines 10 -width 35 -theme-str $rofi_theme | cliphist delete

# ## Launch // Clipboard ##
# $bindsym $mod+Shift+p exec $clipboard

### Idle configuration
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
#
set $idle swayidle -w \
    timeout 600 'light -G > /tmp/brightness && light -S 10' resume 'light -S $([ -f /tmp/brightness ] && cat /tmp/brightness || echo 100%)' \
    timeout 1800 'exec $locking' \
    timeout 3600 'swaymsg "output * dpms off"' \
    resume 'swaymsg "output * dpms on"' \
    before-sleep 'playerctl pause' \
    before-sleep 'exec $locking'

# pulseaudio command
set $pulseaudio $term_float pulsemixer

# set $path_to_elisp $scripts/edit-with-emacs.el
# set $edit_with_emacs emacsclient -c -l $path_to_elisp

set $edit_with_emacs $scripts/edit-with-emacs.sh
$bindsym $mod+Ctrl+e exec $edit_with_emacs

#
# statusbar with waybar
#
set $statusbar waybar
set $waybar_position top
# set $waybar_cmd /home/naoki/.dotfiles/.config/sway/scripts/waybar.sh
set $waybar_cmd $scripts/waybar.sh

# set $hoge /usr/share/sway/scripts
# set $waybar_cmd $hoge/waybar.sh


## Action // Toggle Waybar ##
# $bindsym $mod+Shift+b exec pkill -SIGUSR1 waybar

bar {
    # id default
    swaybar_command $waybar_cmd
    position $waybar_position
    colors {
           background $base00
           separator  $base01
           statusline $base04

           #                   Border  BG      Text
           focused_workspace   $base05 $base0D $base00
           active_workspace    $base05 $base03 $base00
           inactive_workspace  $base03 $base01 $base05
           urgent_workspace    $base08 $base08 $base00
           binding_mode        $base00 $base0A $base00
    }
}

$bindsym $mod+Mod1+p mode $mode_screenshot

# screenshot 
set $grimshot $scripts/grimshot
set $image_upload $scripts/upload-image.sh
set $screenshot_screen_clipboard $grimshot --notify copy output
set $screenshot_screen_file $grimshot --notify save output
set $screenshot_screen_upload $screenshot_screen_file | xargs $image_upload
set $screenshot_selection_window_clipboard $grimshot --notify copy window
set $screenshot_selection_window_file $grimshot --notify save window
set $screenshot_selection_window_upload $screenshot_selection_window_file | xargs $image_upload
set $screenshot_selection_area_clipboard $grimshot --notify copy area
set $screenshot_selection_area_file $grimshot --notify save area
set $screenshot_selection_area_upload $screenshot_selection_area_file | xargs $image_upload

bindsym $mod+Ctrl+4        exec $screenshot_selection_area_file
bindsym $mod+Shift+Ctrl+4  exec $screenshot_selection_area_clipboard
bindsym $mod+Ctrl+5        exec $screenshot_selection_window_file
bindsym $mod+Shift+Ctrl+5  exec $screenshot_selection_window_clipboard

# set $mode_screenshot "<span foreground='$color10'></span>  \
# <span foreground='$color5'><b>Pick</b></span> <span foreground='$color10'>(<b>p</b>)</span> \
# <span foreground='$color5'><b>Output</b></span> <span foreground='$color10'>(<b>o</b>)</span> \
# <span foreground='$color7'>+ <span foreground='$color10'><b>Shift</b></span> for </span> \
# <span foreground='$color7'>+ <span foreground='$color10'><b>Ctrl</b></span> for </span>"

# set $mode_screenshot "<span foreground='$color10'></span>  \
# <span foreground='$color5'><b>Pick</b></span> <span foreground='$color10'>(<b>p</b>)</span> \
# <span foreground='$color5'><b>Output</b></span> <span foreground='$color10'>(<b>o</b>)</span> \
# <span foreground='$color7'>+ <span foreground='$color10'><b>Shift</b></span> for </span> \
# <span foreground='$color7'>+ <span foreground='$color10'><b>Ctrl</b></span> for </span>"

# mode --pango_markup $mode_screenshot {
#     # output = currently active output
#     $bindsym o mode "default", exec $screenshot_screen_clipboard
#     $bindsym Shift+o mode "default", exec $screenshot_screen_file
#     $bindsym Shift+Ctrl+o mode "default", exec $screenshot_screen_upload

#     # pick the region to screenshot
#     $bindsym p mode "default", exec $screenshot_selection_clipboard
#     $bindsym Shift+p mode "default", exec $screenshot_selection_file
#     $bindsym Shift+Ctrl+p mode "default", exec $screenshot_selection_upload

#     # Return to default mode.
#     $bindsym Escape mode "default"
# }

# ## Launch // Screenshot Mode ##
# $bindsym Print mode $mode_screenshot

# set $mode_recording "<span foreground='$base0A'></span>  \
# <span foreground='$base05'><b>Record</b></span> <span foreground='$base0A'>(<b>r</b>)</span> \
# <span foreground='$base05'>+ [<span foreground='$base0A'><b>Shift</b></span> for ]</span>"

# set $recorder $HOME/.config/sway/scripts/recorder.sh

# mode --pango_markup $mode_recording {
#         $bindsym r exec $recorder, mode "default"
#         $bindsym Shift+r exec $recorder -a, mode "default"

#         # Return to default mode.
#         $bindsym Escape mode "default"
# }

# ## Launch // Recording Mode ##
# $bindsym $mod+Shift+r mode $mode_recording

# ## Launch // Stop Recording Mode ##
# $bindsym $mod+Escape exec killall -s SIGINT wf-recorder

# # enable idle mode
# exec $idle

# # autostart background applications
# exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
# exec $notifications

# # if-exists autostarts
# exec {
#      '[ -x "$(command -v fcitx5)" ] && fcitx5'     
# }

exec_always {
     '[ -f $HOME/.config/sway/window-transparency.sh ] && $HOME/.config/sway/window-transparency.sh'
     '[ -x "$(command -v fcitx5)" ] && fcitx5 -d --replace'
}

# exec {
#     '[ -x "$(command -v flashfocus)" ] && flashfocus'
#     '[ -x "$(command -v autotiling)" ] && autotiling'
#     '[ -x "$(command -v fcitx5)" ] && fcitx5'
#     '[ -x "$(command -v foot)" ] && $HOME/.config/sway/scripts/foot.sh --server'
#     '[ -x "$(command -v nwg-wrapper)" ] && [ -f $HOME/.config/nwg-wrapper/help.sh ] && $HOME/.config/sway/scripts/help.sh --restore'
#     '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch cliphist store'
#     '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch pkill -RTMIN+9 waybar'
# }
# exec_always {
#     '[ -x "$(command -v spice-vdagent)" ] && spice-vdagent'
#     # restart kanshi https://github.com/emersion/kanshi/issues/43#issuecomment-531679213
#     '[ -x "$(command -v kanshi)" ] && pkill kanshi; exec kanshi'
#     '[ -x "$(command -v sworkstyle)" ] && pkill sworkstyle; sworkstyle &> /tmp/sworkstyle.log'
#     '[ -x "$(command -v playerctl)" ] && pkill playerctl; playerctl -a metadata --format \'{{status}} {{title}}\' --follow | while read line; do pkill -RTMIN+5 waybar; done'
#     '[ -f $HOME/.config/sway/window-transparency.sh ] && $HOME/.config/sway/window-transparency.sh'
# }

# # https://github.com/Alexays/Waybar/issues/1093#issuecomment-841846291
# exec systemctl --user import-environment DISPLAY WAYLAND_DISPLAY SWAYSOCK
# exec hash dbus-update-activation-environment 2>/dev/null && \
#     dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK
