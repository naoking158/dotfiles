#+TITLE: Wezterm Configuration

#+PROPERTY: header-args:lua :comments no :tangle-mode (identity #o755) :tangle (file-truename "~/.dotfiles/.config/wezterm/wezterm.lua")


* References
- https://github.com/yutkat/dotfiles/tree/8a0d161e262f52683972cde614e11243b7a2d7e2/.config/wezterm
- https://github.com/bew/dotfiles/blob/main/gui/wezterm/wezterm.lua

* Header
:PROPERTIES:
:ID:       5b5613f6-b1b4-4602-a3bf-c7ca73309af0
:END:

#+begin_src lua
-- WezTerm
-- https://wezfurlong.org/wezterm/index.html

local wezterm = require("wezterm")
local utils = require("utils")
#+end_src

* Misc

#+begin_src lua
local cfg_misc = {
   window_close_confirmation = "NeverPrompt",
   check_for_updates = false,
   adjust_window_size_when_changing_font_size = false,
   tab_bar_at_bottom = true,
   disable_default_key_bindings = true,

   -- Avoid unexpected config breakage and unusable terminal
   automatically_reload_config = false,

   -- Make sure word selection stops on most punctuations.
   -- Note that dot (.) & slash (/) are allowed though for
   -- easy selection of paths.
   selection_word_boundary = " \t\n{}[]()\"'`,;:@â”‚*",

   hide_tab_bar_if_only_one_tab = true,

   -- Do not hold on exit by default.
   -- Because the default 'CloseOnCleanExit' can be annoying when exiting with
   -- Ctrl-D and the last command exited with non-zero: the shell will exit
   -- with non-zero and the terminal would hang until the window is closed manually.
   exit_behavior = "Close",

   -- Pad window to avoid the content to be too close to the border,
   -- so it's easier to see and select.
   window_padding = {
      left = 3, right = 3,
      top = 3, bottom = 3,
   },

  -- Color scheme
  -- https://wezfurlong.org/wezterm/config/appearance.html
 
  color_scheme = 'nord',

  -- window_background_opacity = 0.99,

  -- Font configuration
  -- https://wezfurlong.org/wezterm/config/fonts.html
  font = wezterm.font('PlemolJP Console NF'),
  font_size = 16.0,
  use_ime = true,

  -- Disable ligatures
  -- https://wezfurlong.org/wezterm/config/font-shaping.html
  harfbuzz_features = { 'calt=0', 'clig=0', 'liga=0' },

  -- Cursor style
  default_cursor_style = 'BlinkingBar',

  -- Enable CSI u mode
  -- https://wezfurlong.org/wezterm/config/lua/config/enable_csi_u_key_encoding.html
  -- enable_csi_u_key_encoding = true
}
#+end_src

* Theme

* Keybinds

#+begin_src lua
---------------------------------------------------------------
--- keybinds
---------------------------------------------------------------

local tmux_keybinds = {
	{ key = "t", mods = "ALT|SHIFT", action = wezterm.action({ SpawnTab = "CurrentPaneDomain" }) },
	{ key = "d", mods = "ALT|SHIFT", action = wezterm.action({ CloseCurrentTab = { confirm = false } }) },
	{ key = "[", mods = "SUPER", action = wezterm.action({ ActivateTabRelative = -1 }) },
	{ key = "]", mods = "SUPER", action = wezterm.action({ ActivateTabRelative = 1 }) },
	{ key = "[", mods = "SUPER|SHIFT", action = wezterm.action({ MoveTabRelative = -1 }) },
	{ key = "]", mods = "SUPER|SHIFT", action = wezterm.action({ ActivateTabRelative = 1 }) },
	{ key = "q", mods = "ALT|CTRL", action = "ActivateCopyMode" },
	{ key = "y", mods = "CTRL", action = wezterm.action({ PasteFrom = "PrimarySelection" }) },
	-- { key = "1", mods = "ALT", action = wezterm.action({ ActivateTab = 0 }) },
	-- { key = "2", mods = "ALT", action = wezterm.action({ ActivateTab = 1 }) },
	-- { key = "3", mods = "ALT", action = wezterm.action({ ActivateTab = 2 }) },
	-- { key = "4", mods = "ALT", action = wezterm.action({ ActivateTab = 3 }) },
	-- { key = "5", mods = "ALT", action = wezterm.action({ ActivateTab = 4 }) },
	-- { key = "6", mods = "ALT", action = wezterm.action({ ActivateTab = 5 }) },
	-- { key = "7", mods = "ALT", action = wezterm.action({ ActivateTab = 6 }) },
	-- { key = "8", mods = "ALT", action = wezterm.action({ ActivateTab = 7 }) },
	-- { key = "9", mods = "ALT", action = wezterm.action({ ActivateTab = 8 }) },
	{ key = "3", mods = "ALT|CTRL", action = wezterm.action({ SplitVertical = { domain = "CurrentPaneDomain" } }) },
	{ key = "2", mods = "ALT|CTRL", action = wezterm.action({ SplitHorizontal = { domain = "CurrentPaneDomain" } }) },
	{ key = "h", mods = "ALT|SHIFT", action = wezterm.action({ ActivatePaneDirection = "Left" }) },
	{ key = "l", mods = "ALT|SHIFT", action = wezterm.action({ ActivatePaneDirection = "Right" }) },
	{ key = "k", mods = "ALT|SHIFT", action = wezterm.action({ ActivatePaneDirection = "Up" }) },
	{ key = "j", mods = "ALT|SHIFT", action = wezterm.action({ ActivatePaneDirection = "Down" }) },
	{ key = "h", mods = "ALT|SHIFT|CTRL", action = wezterm.action({ AdjustPaneSize = { "Left", 1 } }) },
	{ key = "l", mods = "ALT|SHIFT|CTRL", action = wezterm.action({ AdjustPaneSize = { "Right", 1 } }) },
	{ key = "k", mods = "ALT|SHIFT|CTRL", action = wezterm.action({ AdjustPaneSize = { "Up", 1 } }) },
	{ key = "j", mods = "ALT|SHIFT|CTRL", action = wezterm.action({ AdjustPaneSize = { "Down", 1 } }) },
	{ key = " ", mods = "ALT", action = "QuickSelect" },
  { key = "v", mods = "ALT", action = wezterm.action({ ScrollByPage = -1 }) },
	{ key = "v", mods = "CTRL", action = wezterm.action({ ScrollByPage = 1 }) },
}

local default_keybinds = {
	{ key = "c", mods = "CTRL|SHIFT", action = wezterm.action({ CopyTo = "Clipboard" }) },
	{ key = "v", mods = "CTRL|SHIFT", action = wezterm.action({ PasteFrom = "Clipboard" }) },
	{ key = "Insert", mods = "SHIFT", action = wezterm.action({ PasteFrom = "PrimarySelection" }) },
	{ key = "=", mods = "CTRL", action = "ResetFontSize" },
	{ key = "+", mods = "CTRL", action = "IncreaseFontSize" },
	{ key = "-", mods = "CTRL", action = "DecreaseFontSize" },
	{ key = " ", mods = "CTRL|SHIFT", action = "QuickSelect" },
	{ key = "x", mods = "CTRL|SHIFT", action = "ActivateCopyMode" },
	{ key = "PageUp", mods = "ALT", action = wezterm.action({ ScrollByPage = -1 }) },
	{ key = "PageDown", mods = "ALT", action = wezterm.action({ ScrollByPage = 1 }) },
	{ key = "r", mods = "ALT", action = "ReloadConfiguration" },
	{ key = "r", mods = "ALT|SHIFT", action = wezterm.action({ EmitEvent = "toggle-tmux-keybinds" }) },
	{ key = "e", mods = "ALT", action = wezterm.action({ EmitEvent = "trigger-emacs-with-scrollback" }) },
	-- { key = "x", mods = "ALT", action = wezterm.action({ CloseCurrentPane = { confirm = false } }) },
}

local function create_keybinds()
	return utils.merge_lists(default_keybinds, tmux_keybinds)
end
#+end_src

* Wezterm on

#+begin_src lua
---------------------------------------------------------------
--- wezterm on
---------------------------------------------------------------
wezterm.on("format-tab-title", function(tab, tabs, panes, config, hover, max_width)
              local title = wezterm.truncate_right(utils.basename(tab.active_pane.foreground_process_name), max_width)
              if title == "" then
                 local uri = utils.convert_home_dir(tab.active_pane.current_working_dir)
                 local basename = utils.basename(uri)
                 if basename == "" then
                    basename = uri
                 end
                 title = wezterm.truncate_right(basename, max_width)
              end
              return {
                 { Text = tab.tab_index + 1 .. ":" .. title },
              }
end)

wezterm.on("update-right-status", function(window, pane)
              local cwd_uri = pane:get_current_working_dir()
              local cwd = ""
              local hostname = ""
              if cwd_uri then
                 cwd_uri = cwd_uri:sub(8)
                 local slash = cwd_uri:find("/")
                 if slash then
                    hostname = cwd_uri:sub(1, slash - 1)
                    -- Remove the domain name portion of the hostname
                    local dot = hostname:find("[.]")
                    if dot then
                       hostname = hostname:sub(1, dot - 1)
                    end
                    if hostname ~= "" then
                       hostname = "@" .. hostname
                    end
                    -- and extract the cwd from the uri
                    cwd = utils.convert_home_dir(cwd)
                 end
              end

              window:set_right_status(wezterm.format({
                                            { Attribute = { Underline = "Single" } },
                                            { Attribute = { Italic = true } },
                                            { Text = cwd .. hostname },
              }))
end)

wezterm.on("toggle-tmux-keybinds", function(window, pane)
              local overrides = window:get_config_overrides() or {}
              if not overrides.window_background_opacity then
                 overrides.window_background_opacity = 0.95
                 overrides.keys = default_keybinds
              else
                 overrides.window_background_opacity = nil
                 overrides.keys = utils.merge_lists(default_keybinds, tmux_keybinds)
              end
              window:set_config_overrides(overrides)
end)

local io = require("io")
local os = require("os")

wezterm.on("trigger-emacs-with-scrollback", function(window, pane)
              local scrollback = pane:get_lines_as_text()
              local name = os.tmpname()
              local f = io.open(name, "w+")
              f:write(scrollback)
              f:flush()
              f:close()
              window:perform_action(
                 wezterm.action({ SpawnCommandInNewTab = {
                                     args = { "emacs", "-Q", "-nw", name },
                 } }),
                 pane
              )
              wezterm.sleep_ms(1000)
              os.remove(name)
end)
#+end_src

* Local Config

#+begin_src lua
---------------------------------------------------------------
--- wezterm on
---------------------------------------------------------------
wezterm.on("format-tab-title", function(tab, tabs, panes, config, hover, max_width)
	local title = wezterm.truncate_right(utils.basename(tab.active_pane.foreground_process_name), max_width)
	if title == "" then
		local uri = utils.convert_home_dir(tab.active_pane.current_working_dir)
		local basename = utils.basename(uri)
		if basename == "" then
			basename = uri
		end
		title = wezterm.truncate_right(basename, max_width)
	end
	return {
		{ Text = tab.tab_index + 1 .. ":" .. title },
	}
end)

wezterm.on("update-right-status", function(window, pane)
	local cwd_uri = pane:get_current_working_dir()
	local cwd = ""
	local hostname = ""
	if cwd_uri then
		cwd_uri = cwd_uri:sub(8)
		local slash = cwd_uri:find("/")
		if slash then
			hostname = cwd_uri:sub(1, slash - 1)
			-- Remove the domain name portion of the hostname
			local dot = hostname:find("[.]")
			if dot then
				hostname = hostname:sub(1, dot - 1)
			end
			if hostname ~= "" then
				hostname = "@" .. hostname
			end
			-- and extract the cwd from the uri
			cwd = utils.convert_home_dir(cwd)
		end
	end

	window:set_right_status(wezterm.format({
		{ Attribute = { Underline = "Single" } },
		{ Attribute = { Italic = true } },
		{ Text = cwd .. hostname },
	}))
end)

wezterm.on("toggle-tmux-keybinds", function(window, pane)
	local overrides = window:get_config_overrides() or {}
	if not overrides.window_background_opacity then
		overrides.window_background_opacity = 0.95
		overrides.keys = default_keybinds
	else
		overrides.window_background_opacity = nil
		overrides.keys = utils.merge_lists(default_keybinds, tmux_keybinds)
	end
	window:set_config_overrides(overrides)
end)

local io = require("io")
local os = require("os")

wezterm.on("trigger-nvim-with-scrollback", function(window, pane)
	local scrollback = pane:get_lines_as_text()
	local name = os.tmpname()
	local f = io.open(name, "w+")
	f:write(scrollback)
	f:flush()
	f:close()
	window:perform_action(
		wezterm.action({ SpawnCommandInNewTab = {
			args = { "nvim", name },
		} }),
		pane
	)
	wezterm.sleep_ms(1000)
	os.remove(name)
end)
#+end_src

* Mearge all config and return it

#+begin_src lua
---------------------------------------------------------------
--- Config
---------------------------------------------------------------
local config = {   
   keys = create_keybinds(),
}

return utils.merge_tables(cfg_misc, config, local_config)
#+end_src

* Utils

#+begin_src lua :comments no :tangle (file-truename "~/.dotfiles/.config/wezterm/utils.lua")
local M = {}

function M.basename(s)
	return string.gsub(s, "(.*[/\\])(.*)", "%2")
end

function M.merge_tables(t1, t2)
	for k, v in pairs(t2) do
		if (type(v) == "table") and (type(t1[k] or false) == "table") then
			M.merge_tables(t1[k], t2[k])
		else
			t1[k] = v
		end
	end
	return t1
end

function M.merge_lists(t1, t2)
	local result = {}
	for _, v in pairs(t1) do
		table.insert(result, v)
	end
	for _, v in pairs(t2) do
		table.insert(result, v)
	end
	return result
end

function M.exists(tab, element)
	for _, v in pairs(tab) do
		if v == element then
			return true
		elseif type(v) == "table" then
			return M.exists(v, element)
		end
	end
	return false
end

function M.convert_home_dir(path)
	local cwd = path
	local home = os.getenv("HOME")
	cwd = cwd:gsub("^" .. home .. "/", "~/")
	return cwd
end

return M
#+end_src
