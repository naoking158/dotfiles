#!/bin/bash
#
#
# ================
# $0 is a modified rsync program to download and upload SRC files
# to and from MDL's HOST machine.
#
# Usage:
#   HOST machine is in local network:
#
#     Download: $0_end [-d|--download] [OPTION]... HOST SRC DEST
#     Upload:   $0 [-u|--upload] [OPTION]... HOST SRC [SRC]... DEST
#
#
#   HOST machine is _redNOT_end in local network:
#
#     Download: $0 [-d|--download] [-p|--port-forward] [OPTION]... HOST SRC DEST
#     Upload:   $0 [-u|--upload] [-p|--port-forward] [OPTION]... HOST SRC [SRC]... DEST
#
#   This command is based on system default rsync, that is
#   _redmultiple SRC cannot be specified for download_end.
#
#
# Examples:
#   case1: Upload ~/foo to ~/tmp/ on kingkong (defined in ~/.ssh/config on local machine)
#     $0 -u kingkong ~/foo ~/tmp/
#
#   case2: case1 over global network with port forwarding through MDL's gateway
#     $0 -u --port-forward kingkong ~/foo ~/tmp/
#  or $0 -u kingkong ~/foo ~/tmp/ -p
#  or $0 -p kingkong -u ~/foo ~/tmp/
#  or $0 -pu kingkong ~/foo ~/tmp/
#
# The position of the options is free,
# but the relative positions of HOST, SRC, and DEST _redmust be preserved_end.
#
#
# Options:
#   -h, --help
#   -n, --dry-run
#   -d, --download           download SRC from HOST and put it into DEST
#   -u, --upload             upload SRC to HOST and put it into DEST
#   -p, --port-forward       rsync with port forwarding through MDL's gateway
#   -e, --exclude=PATTERN    exclude files matching PATTERN
#   -i, --include=PATTERN    don't exclude files matching PATTERN
#

function help () {
    awk -v CMD="$(basename $0)" 'NR > 2 {
    if (/^#/) { sub("^# ?", "");
                sub("\\$0", "\033[1;36m"CMD"\033[m");
                sub("_red", "\033[1;31m");
                sub("_cyan", "\033[1;36m")
                sub("_end", "\033[m");
                print }
    else { exit }
    }' $0
    exit 0
}

e_error() {
    printf " \033[31m%s\033[m\n" "âœ– $*" 1>&2
}

e_red() {
    printf " \033[31m%s\033[m" "$*"
    return 0
}

e_cyan() {
    printf " \033[36m%s\033[m" "$*"
}

set -Cu  # removed -e to close ssh tunnel when rsync is failed
set -f
MDL="ssh-user@gateway.mdl.cs.tsukuba.ac.jp"

[[ $# = 0 ]] && help
IsDryRun=""
while (( $# > 0 )); do
    case $1 in
        -h | --help)
            help
            ;;
        -n | --dry-run)
            IsDryRun=$1
            ;;
        -p | --port-forward)
            IsPortForward=$1
            ;;
        -d | --download)
            if [[ -z ${DIRECTION:-} ]]; then
                DIRECTION="down"
            else
                e_error "Both download and upload are specified."
                echo "Choose on of them."
                exit 1
            fi
            ;;
        -u | --upload)
            if [[ -z ${DIRECTION:-} ]]; then
                DIRECTION="up"
            else
                e_error "Both download and upload are specified."
                echo "Choose on of them."
                exit 1
            fi
            ;;
        -e | --exclude | --exclude=*)
            if [[ -n ${exclude:-} ]]; then
                e_error "Too many --exclude option."
                exit 1
            elif [[ "$1" =~ ^--exclude= ]]; then
                exclude=$1
            elif [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                e_error "'-e/--exclude' require an argument."
                exit 1
            else
                exclude="--exclude=$2"
                shift
            fi
            ;;
        -i | --include | --include=*)
            if [[ -n ${include:-} ]]; then
                e_error "Too many --include option."
                exit 1
            elif [[ "$1" =~ ^--include= ]]; then
                include="$1"
            elif [[ -z "${2:-}" ]] || [[ "$2" =~ ^-+ ]]; then
                e_error "'-i/--include' require an argument."
                exit 1
            else
                include="--include=$2"
                shift
            fi
            ;;
        -*)
            if [[ "${#1}" = 2 ]]; then
                e_error "Illegal option -- '$(echo $1 | sed 's/^-*//')'."
                help
            else
                opts=($(echo $1 | sed 's/-//g' | sed 's/./-& /g'))
                set -- "$@" "${opts[@]}"
            fi
            ;;
        *)
            if [[ -z ${ARGS:-} ]]; then
                ARGS=("$1")
            else
                ARGS=("${ARGS[@]}" "$1")
            fi
            ;;
    esac
    shift
done

[[ -z ${DIRECTION:-} ]] && {
    e_error "Either download or upload must be specified."
    exit 1
}

if [[ -z ${ARGS:-} ]]; then
    help
elif [[ ${#ARGS[@]} < 3 ]]; then
    e_error "Too few arguments -- ${ARGS[@]}"
    echo "Check usage -- $(e_cyan $(basename $0)) -h"
    exit 1
elif [[ ${#ARGS[@]} > 3 && ${IsDownload:-} ]]; then
    e_error "Too many arguments -- ${ARGS[@]}"
    echo "This command is based on system default rsync, so it only allows a single SRC of HOST."
    echo "This means that $(e_red 'multiple directories cannot be specified for download')."
    exit 1
fi


if [[ -n ${include:-} ]] && [[ -n ${exclude:-} ]]; then
    e_error "Only one of `--include` and `--exclude` can be used."
    exit 1
elif [[ -n ${include:-} ]]; then
    exclude="--exclude=*"    
elif [[ -n ${exclude:-} ]]; then
    include="--include=''"
else
    exclude="--exclude=''"
    include="--include=*"
fi


function hostname_of() {
    ssh -G $1 | awk '/^hostname / { print $2 }'
}

function port_of() {
    ssh -G $1 | awk '/^port / { print $2 }'
}

function sshtunnel() {
    if [[ $# -ne 3 ]]; then
        e_error "Usage: sshtunnel HOST HOSTPORT LOCALPORT"
        exit 1
    else
        local host=$(hostname_of $1)
        local port=$2
        local hostport=$3

        ssh -M -S mdlssh-socket -fNL ${hostport}:${host}:${port} ${MDL} -l ${USER}
        echo "Tunnel from localhost:$hostport to $host:$port has been created."
        echo "Be sure to kill the tunnel after you finish your job, by sshexit $hostport"
    fi
}

function sshexit() {
    local hostport=$1

    if [[ $(ps aux | grep "mdlssh-socket" | grep ${hostport} -c) ]]; then
        ssh -S mdlssh-socket -O exit $MDL
        echo "All SSH tunnels closed"
    else
        echo "No running tunnels"
    fi
}

function get_nth() {
  local n=$1
  shift
  eval echo \$${n}
}

function mdlrsyncfrom() {
    local host=$1
    local remotepath=$(echo $2 | awk -v home="$HOME" '{ sub(home, "\~"); print }')
    local localpath=$3
    
    sshtunnel $host 22 10022
    rsync $IsDryRun -avz --copy-unsafe-links --progress --bwlimit=5120 --rsh="ssh -p 10022" "${USER}@localhost:${remotepath}" "$localpath" --include='*/' "$include" "$exclude"
    sshexit 10022
}

function mdlrsyncto() {
    local host=$1
    shift
    local localpath=${@:0:$#}
    local remotepath=$(echo ${@:$#} | awk -v home="$HOME" '{ sub(home, "\~"); print }')

    sshtunnel $host 22 10022
    rsync $IsDryRun -avz --copy-unsafe-links --progress --bwlimit=5120 --rsh="ssh -p 10022" $localpath ${USER}@localhost:${remotepath} --include="*/" "$include" "$exclude"
    sshexit 10022
}

function rsyncfrom() {
    local host=$(hostname_of $1)
    local port=$(port_of $1)
    local remotepath=$(echo $2 | awk -v home="$HOME" '{ sub(home, "\~"); print }')
    local localpath=$3
    rsync $IsDryRun -avz --copy-unsafe-links -e "ssh -p $port" ${USER}@${host}:${remotepath} $localpath --include='*/' "$include" "$exclude"
}

function rsyncto() {
    local host=$(hostname_of $1)
    local port=$(port_of $1)
    shift
    local localpath=${@:0:$#}
    local remotepath=$(echo ${@:$#} | awk -v home="$HOME" '{ sub(home, "\~"); print }')
    rsync $IsDryRun -avz --copy-unsafe-links -e "ssh -p $port" $localpath ${USER}@${host}:${remotepath} --include='*/' "$include" "$exclude"
}

# main
case "${DIRECTION}" in
    up)
        if [[ ${IsPortForward:-} ]]; then
            mdlrsyncto ${ARGS[@]}
        else
            rsyncto ${ARGS[@]}
        fi
        ;;
    down)
        if [[ ${IsPortForward:-} ]]; then
            mdlrsyncfrom ${ARGS[@]}
        else
            rsyncfrom ${ARGS[@]}
        fi
        ;;
    *)
        e_error "Illegal option -- $DIRECTION"
        ;;
esac

[[ "${IsDryRun:-}" ]] && { e_red "This is dry run. File are unchanged." ; }
return 0
